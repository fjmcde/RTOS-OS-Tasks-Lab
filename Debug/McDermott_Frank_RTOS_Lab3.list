
McDermott_Frank_RTOS_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006284  08006284  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800628c  0800628c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00004e4c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004eac  20004eac  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000170ea  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033b8  00000000  00000000  000371bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001438  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f96  00000000  00000000  0003b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026278  00000000  00000000  0003c946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001663b  00000000  00000000  00062bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e5123  00000000  00000000  000791f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000057c0  00000000  00000000  0015e31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00163adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061c0 	.word	0x080061c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080061c0 	.word	0x080061c0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Gyro_Init>:
/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 80004f0:	f000 f80a 	bl	8000508 <Gyro_Power_On>
	HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 ff43 	bl	8001380 <HAL_Delay>
	Gyro_Config_Regs();
 80004fa:	f000 f8b7 	bl	800066c <Gyro_Config_Regs>
	Gyro_Reboot();
 80004fe:	f000 f847 	bl	8000590 <Gyro_Reboot>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */
void Gyro_Power_On()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 8000516:	f000 f921 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800051a:	bf00      	nop
 800051c:	2102      	movs	r1, #2
 800051e:	481a      	ldr	r0, [pc, #104]	; (8000588 <Gyro_Power_On+0x80>)
 8000520:	f001 fa10 	bl	8001944 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f8      	bne.n	800051c <Gyro_Power_On+0x14>

	Gyro_Transmit_Data(&cmd);
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f947 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f929 	bl	800078c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800053a:	f000 f91b 	bl	8000774 <Gyro_Slave_Disable>

	cmd = (GYRO_WRITE | CTRL_REG1);
 800053e:	2320      	movs	r3, #32
 8000540:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	f043 0308 	orr.w	r3, r3, #8
 8000548:	b2db      	uxtb	r3, r3
 800054a:	717b      	strb	r3, [r7, #5]

	Gyro_Slave_Enable();
 800054c:	f000 f906 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000550:	bf00      	nop
 8000552:	2102      	movs	r1, #2
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <Gyro_Power_On+0x80>)
 8000556:	f001 f9f5 	bl	8001944 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f8      	bne.n	8000552 <Gyro_Power_On+0x4a>

	Gyro_Transmit_Data(&cmd);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f92c 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000568:	1d7b      	adds	r3, r7, #5
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f928 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000570:	f000 f900 	bl	8000774 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <Gyro_Power_On+0x84>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d000      	beq.n	800057e <Gyro_Power_On+0x76>
	{
		while(1);
 800057c:	e7fe      	b.n	800057c <Gyro_Power_On+0x74>
	}
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020800 	.word	0x40020800
 800058c:	2000007c 	.word	0x2000007c

08000590 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */
void Gyro_Reboot()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 8000596:	23a4      	movs	r3, #164	; 0xa4
 8000598:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800059e:	f000 f8dd 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80005a2:	bf00      	nop
 80005a4:	2102      	movs	r1, #2
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <Gyro_Reboot+0x74>)
 80005a8:	f001 f9cc 	bl	8001944 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f8      	bne.n	80005a4 <Gyro_Reboot+0x14>

	Gyro_Transmit_Data(&cmd);
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f903 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80005ba:	1dbb      	adds	r3, r7, #6
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f8e5 	bl	800078c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 80005c2:	f000 f8d7 	bl	8000774 <Gyro_Slave_Disable>

	cmd = (GYRO_WRITE | CTRL_REG5);
 80005c6:	2324      	movs	r3, #36	; 0x24
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	717b      	strb	r3, [r7, #5]

	Gyro_Slave_Enable();
 80005d4:	f000 f8c2 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80005d8:	bf00      	nop
 80005da:	2102      	movs	r1, #2
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <Gyro_Reboot+0x74>)
 80005de:	f001 f9b1 	bl	8001944 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f8      	bne.n	80005da <Gyro_Reboot+0x4a>

	Gyro_Transmit_Data(&cmd);
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f8e8 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80005f0:	1d7b      	adds	r3, r7, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f8e4 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80005f8:	f000 f8bc 	bl	8000774 <Gyro_Slave_Disable>

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020800 	.word	0x40020800

08000608 <Gyro_Get_Velocity>:
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	80fb      	strh	r3, [r7, #6]
	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8000612:	23ea      	movs	r3, #234	; 0xea
 8000614:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800061e:	f000 f89d 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000622:	bf00      	nop
 8000624:	2102      	movs	r1, #2
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <Gyro_Get_Velocity+0x60>)
 8000628:	f001 f98c 	bl	8001944 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f8      	bne.n	8000624 <Gyro_Get_Velocity+0x1c>

	Gyro_Transmit_Data(&cmd);
 8000632:	1d7b      	adds	r3, r7, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f8c3 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f8a5 	bl	800078c <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f8a1 	bl	800078c <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800064a:	f000 f893 	bl	8000774 <Gyro_Slave_Disable>

	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	793b      	ldrb	r3, [r7, #4]
 8000656:	b21b      	sxth	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	80fb      	strh	r3, [r7, #6]

	return yval;
 800065c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020800 	.word	0x40020800

0800066c <Gyro_Config_Regs>:
/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 8000672:	2320      	movs	r3, #32
 8000674:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 8000676:	231a      	movs	r3, #26
 8000678:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800067a:	f000 f86f 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800067e:	bf00      	nop
 8000680:	2102      	movs	r1, #2
 8000682:	482e      	ldr	r0, [pc, #184]	; (800073c <Gyro_Config_Regs+0xd0>)
 8000684:	f001 f95e 	bl	8001944 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f8      	bne.n	8000680 <Gyro_Config_Regs+0x14>

	Gyro_Transmit_Data(&addr_cmd);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f895 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f891 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800069e:	f000 f869 	bl	8000774 <Gyro_Slave_Disable>

	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 80006a2:	2323      	movs	r3, #35	; 0x23
 80006a4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 80006a6:	2310      	movs	r3, #16
 80006a8:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 80006aa:	f000 f857 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006ae:	bf00      	nop
 80006b0:	2102      	movs	r1, #2
 80006b2:	4822      	ldr	r0, [pc, #136]	; (800073c <Gyro_Config_Regs+0xd0>)
 80006b4:	f001 f946 	bl	8001944 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f8      	bne.n	80006b0 <Gyro_Config_Regs+0x44>

	Gyro_Transmit_Data(&addr_cmd);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 f87d 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80006c6:	1dbb      	adds	r3, r7, #6
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f879 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80006ce:	f000 f851 	bl	8000774 <Gyro_Slave_Disable>

	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 80006d2:	2324      	movs	r3, #36	; 0x24
 80006d4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 80006da:	f000 f83f 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006de:	bf00      	nop
 80006e0:	2102      	movs	r1, #2
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <Gyro_Config_Regs+0xd0>)
 80006e4:	f001 f92e 	bl	8001944 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f8      	bne.n	80006e0 <Gyro_Config_Regs+0x74>

	Gyro_Transmit_Data(&addr_cmd);
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f865 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f861 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80006fe:	f000 f839 	bl	8000774 <Gyro_Slave_Disable>

	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8000702:	232e      	movs	r3, #46	; 0x2e
 8000704:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8000706:	2300      	movs	r3, #0
 8000708:	71bb      	strb	r3, [r7, #6]

	Gyro_Slave_Enable();
 800070a:	f000 f827 	bl	800075c <Gyro_Slave_Enable>

	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800070e:	bf00      	nop
 8000710:	2102      	movs	r1, #2
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <Gyro_Config_Regs+0xd0>)
 8000714:	f001 f916 	bl	8001944 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f8      	bne.n	8000710 <Gyro_Config_Regs+0xa4>

	Gyro_Transmit_Data(&addr_cmd);
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f84d 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f849 	bl	80007c0 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800072e:	f000 f821 	bl	8000774 <Gyro_Slave_Disable>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40020800 	.word	0x40020800

08000740 <Gyro_HAL_Check>:
/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check()
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK)
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <Gyro_HAL_Check+0x18>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d000      	beq.n	800074e <Gyro_HAL_Check+0xe>
	{
		while(1);
 800074c:	e7fe      	b.n	800074c <Gyro_HAL_Check+0xc>
	}
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	2000007c 	.word	0x2000007c

0800075c <Gyro_Slave_Enable>:
/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2102      	movs	r1, #2
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <Gyro_Slave_Enable+0x14>)
 8000766:	f001 f905 	bl	8001974 <HAL_GPIO_WritePin>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40020800 	.word	0x40020800

08000774 <Gyro_Slave_Disable>:
/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <Gyro_Slave_Disable+0x14>)
 800077e:	f001 f8f9 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020800 	.word	0x40020800

0800078c <Gyro_Receive_Data>:
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t* rx_buff)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8000794:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000798:	2201      	movs	r2, #1
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <Gyro_Receive_Data+0x2c>)
 800079e:	f001 ff33 	bl	8002608 <HAL_SPI_Receive>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <Gyro_Receive_Data+0x30>)
 80007a8:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80007aa:	f7ff ffc9 	bl	8000740 <Gyro_HAL_Check>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200002c8 	.word	0x200002c8
 80007bc:	2000007c 	.word	0x2000007c

080007c0 <Gyro_Transmit_Data>:
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t* tx_buff)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 80007c8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80007cc:	2201      	movs	r2, #1
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <Gyro_Transmit_Data+0x2c>)
 80007d2:	f001 fdd6 	bl	8002382 <HAL_SPI_Transmit>
 80007d6:	4603      	mov	r3, r0
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <Gyro_Transmit_Data+0x30>)
 80007dc:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80007de:	f7ff ffaf 	bl	8000740 <Gyro_HAL_Check>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200002c8 	.word	0x200002c8
 80007f0:	2000007c 	.word	0x2000007c

080007f4 <appInit>:
/*
 * 	@brief 	Initialize application code
 * 	@retval None
 */
void appInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	#ifdef LAB3_USE_TASK
	appTaskInit();
 80007f8:	f000 f892 	bl	8000920 <appTaskInit>

	validateAppTimerState();
	#endif


}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <sampleUserButton>:
/*
 *  @brief Sample User Button
 *  @retval none
 */
void sampleUserButton(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	// Sample current button state
	buttonState = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8000804:	2101      	movs	r1, #1
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <sampleUserButton+0x18>)
 8000808:	f001 f89c 	bl	8001944 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <sampleUserButton+0x1c>)
 8000812:	701a      	strb	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40020000 	.word	0x40020000
 800081c:	2000007d 	.word	0x2000007d

08000820 <getGyroRateOfRotation>:
/*
 *  @brief Get Gyro Rate of Rotation
 *  @retval gyroRate
 * */
static gyroRotationRate getGyroRateOfRotation(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	// Variable to store and return the gyro rotation rate
	gyroRotationRate gyroRate;

	// Get the gyro velocity
	rawVelocity = Gyro_Get_Velocity();
 8000826:	f7ff feef 	bl	8000608 <Gyro_Get_Velocity>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <getGyroRateOfRotation+0x74>)
 8000830:	801a      	strh	r2, [r3, #0]
	// 		velocity <= -15000 			= counterClockwiseFast
	//		-15000 < velocity <= -2000 	= counterClockwiseSlow
	//		-2000 < velocity < 2000		= nearlyZero (treated as clockwise)
	//		150 <= velocity < 15000		= clockwiseSlow
	//		velocity >= 15000			= clockwiseFast
	if(rawVelocity <= counterClockwiseFast)
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <getGyroRateOfRotation+0x74>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4a17      	ldr	r2, [pc, #92]	; (8000898 <getGyroRateOfRotation+0x78>)
 800083a:	4293      	cmp	r3, r2
 800083c:	da03      	bge.n	8000846 <getGyroRateOfRotation+0x26>
	{
		gyroRate = counterClockwiseFast;
 800083e:	f24c 5368 	movw	r3, #50536	; 0xc568
 8000842:	80fb      	strh	r3, [r7, #6]
 8000844:	e020      	b.n	8000888 <getGyroRateOfRotation+0x68>
	}
	else if(rawVelocity <= counterClockwiseSlow)
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <getGyroRateOfRotation+0x74>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b21b      	sxth	r3, r3
 800084c:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000850:	dc03      	bgt.n	800085a <getGyroRateOfRotation+0x3a>
	{
		gyroRate = counterClockwiseSlow;
 8000852:	f64f 0330 	movw	r3, #63536	; 0xf830
 8000856:	80fb      	strh	r3, [r7, #6]
 8000858:	e016      	b.n	8000888 <getGyroRateOfRotation+0x68>
	}
	else if(rawVelocity < clockwiseSlow)
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <getGyroRateOfRotation+0x74>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b21b      	sxth	r3, r3
 8000860:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000864:	da02      	bge.n	800086c <getGyroRateOfRotation+0x4c>
	{
		gyroRate = nearlyZero;
 8000866:	2300      	movs	r3, #0
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	e00d      	b.n	8000888 <getGyroRateOfRotation+0x68>
	}
	else if(rawVelocity < clockwiseFast)
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <getGyroRateOfRotation+0x74>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b21b      	sxth	r3, r3
 8000872:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000876:	4293      	cmp	r3, r2
 8000878:	dc03      	bgt.n	8000882 <getGyroRateOfRotation+0x62>
	{
		gyroRate = clockwiseSlow;
 800087a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800087e:	80fb      	strh	r3, [r7, #6]
 8000880:	e002      	b.n	8000888 <getGyroRateOfRotation+0x68>
	}
	else // rawVelocity > clockwiseFast
	{
		gyroRate = clockwiseFast;
 8000882:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000886:	80fb      	strh	r3, [r7, #6]
	}

	return gyroRate;
 8000888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000080 	.word	0x20000080
 8000898:	ffffc569 	.word	0xffffc569

0800089c <driveLEDs>:
/*
 * @brief	Drive the User LEDs based on button and gyro inputs
 * @retval	None
 */
void driveLEDs(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	// Sample the user button to update the global buttonState variable
	sampleUserButton();
	#endif

	// Sample the gyro rotation rate
	rotation = getGyroRateOfRotation();
 80008a0:	f7ff ffbe 	bl	8000820 <getGyroRateOfRotation>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <driveLEDs+0x78>)
 80008aa:	801a      	strh	r2, [r3, #0]

	// Drive green LED if button is pressed or gyro is rotating counter-clockwise
	if((buttonState == GPIO_PIN_SET) || (rotation <= counterClockwiseSlow))
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <driveLEDs+0x7c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d005      	beq.n	80008c2 <driveLEDs+0x26>
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <driveLEDs+0x78>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80008c0:	dc06      	bgt.n	80008d0 <driveLEDs+0x34>
	{
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	4814      	ldr	r0, [pc, #80]	; (800091c <driveLEDs+0x80>)
 80008ca:	f001 f853 	bl	8001974 <HAL_GPIO_WritePin>
 80008ce:	e005      	b.n	80008dc <driveLEDs+0x40>
	}
	// ... Otherwise turn off green LED
	else
	{
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d6:	4811      	ldr	r0, [pc, #68]	; (800091c <driveLEDs+0x80>)
 80008d8:	f001 f84c 	bl	8001974 <HAL_GPIO_WritePin>
	}

	// Drive red LED if button is pressed and gyro is rotating clockwise
	if((buttonState == GPIO_PIN_SET) && (rotation > counterClockwiseSlow))
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <driveLEDs+0x7c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d10c      	bne.n	8000900 <driveLEDs+0x64>
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <driveLEDs+0x78>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80008f0:	dd06      	ble.n	8000900 <driveLEDs+0x64>
	{
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f8:	4808      	ldr	r0, [pc, #32]	; (800091c <driveLEDs+0x80>)
 80008fa:	f001 f83b 	bl	8001974 <HAL_GPIO_WritePin>
 80008fe:	e006      	b.n	800090e <driveLEDs+0x72>
	}
	// ... Otherwise turn off red LED
	else
	{
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <driveLEDs+0x80>)
 8000908:	f001 f834 	bl	8001974 <HAL_GPIO_WritePin>
	}
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000007e 	.word	0x2000007e
 8000918:	2000007d 	.word	0x2000007d
 800091c:	40021800 	.word	0x40021800

08000920 <appTaskInit>:
/*
 * @brief	Initialize the application task
 * @retval	None
 */
void appTaskInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	// Create a new OS thread of the app task
	taskID = osThreadNew(appTask, NULL, &taskAttrib);
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <appTaskInit+0x24>)
 8000926:	2100      	movs	r1, #0
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <appTaskInit+0x28>)
 800092a:	f002 fd97 	bl	800345c <osThreadNew>
 800092e:	4603      	mov	r3, r0
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <appTaskInit+0x2c>)
 8000932:	6013      	str	r3, [r2, #0]

	// Ensure task was created properly
	if(taskID == NULL)
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <appTaskInit+0x2c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d100      	bne.n	800093e <appTaskInit+0x1e>
	{
		while(1){}
 800093c:	e7fe      	b.n	800093c <appTaskInit+0x1c>
	}
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800622c 	.word	0x0800622c
 8000948:	08000951 	.word	0x08000951
 800094c:	200002c0 	.word	0x200002c0

08000950 <appTask>:
/*
 * @brief	Application task
 * @retval	None
 */
static void appTask(void* arg)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

	// Execute task function
	while(1)
	{
		// Sample the user button state
		sampleUserButton();
 8000958:	f7ff ff52 	bl	8000800 <sampleUserButton>

		// Drive LEDs
		driveLEDs();
 800095c:	f7ff ff9e 	bl	800089c <driveLEDs>

		// Delay between samples
		osState = osDelay(TASK_DELAY);
 8000960:	2064      	movs	r0, #100	; 0x64
 8000962:	f002 fe13 	bl	800358c <osDelay>
 8000966:	4603      	mov	r3, r0
 8000968:	4a02      	ldr	r2, [pc, #8]	; (8000974 <appTask+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
		validateOSStatus();
 800096c:	f000 f804 	bl	8000978 <validateOSStatus>
		sampleUserButton();
 8000970:	e7f2      	b.n	8000958 <appTask+0x8>
 8000972:	bf00      	nop
 8000974:	200002c4 	.word	0x200002c4

08000978 <validateOSStatus>:
/*
 * @brief	Validates the current OS status
 * @retval	None
 */
static void validateOSStatus(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	// Catch OS thread errors
	switch(osState)
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <validateOSStatus+0x1c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d000      	beq.n	8000986 <validateOSStatus+0xe>
	{
		case osOK:
			break;
		default:
			while(1){}
 8000984:	e7fe      	b.n	8000984 <validateOSStatus+0xc>
			break;
 8000986:	bf00      	nop
			break;
	}
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	200002c4 	.word	0x200002c4

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	// Reset of all peripherals, Initializes the Flash interface and the Systick.
	HAL_Init();
 800099c:	f000 fc7e 	bl	800129c <HAL_Init>

	// Configure the system clock
	SystemClock_Config();
 80009a0:	f000 f81e 	bl	80009e0 <SystemClock_Config>

	// Initialize all configured peripherals
	MX_GPIO_Init();
 80009a4:	f000 f8e0 	bl	8000b68 <MX_GPIO_Init>
	MX_SPI5_Init();
 80009a8:	f000 f886 	bl	8000ab8 <MX_SPI5_Init>
	MX_TIM11_Init();
 80009ac:	f000 f8ba 	bl	8000b24 <MX_TIM11_Init>

	// Initialize gyro before OS kernal to avoid issues
	// relayeted to the HAL_delay call
	Gyro_Init();
 80009b0:	f7ff fd9c 	bl	80004ec <Gyro_Init>

	// Init scheduler
	osKernelInitialize();
 80009b4:	f002 fd08 	bl	80033c8 <osKernelInitialize>

	// Start default OS thread
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <main+0x3c>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <main+0x40>)
 80009be:	f002 fd4d 	bl	800345c <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <main+0x44>)
 80009c6:	6013      	str	r3, [r2, #0]

	// Initialze app
	appInit();
 80009c8:	f7ff ff14 	bl	80007f4 <appInit>

	// Start scheduler
	osKernelStart();
 80009cc:	f002 fd20 	bl	8003410 <osKernelStart>

	// We should never get here as control is now taken by the scheduler
	while (1)
 80009d0:	e7fe      	b.n	80009d0 <main+0x38>
 80009d2:	bf00      	nop
 80009d4:	08006250 	.word	0x08006250
 80009d8:	08001039 	.word	0x08001039
 80009dc:	20000368 	.word	0x20000368

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f005 fafc 	bl	8005fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <SystemClock_Config+0xd0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a54:	2308      	movs	r3, #8
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a58:	2332      	movs	r3, #50	; 0x32
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a60:	2307      	movs	r3, #7
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 ff9d 	bl	80019a8 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a74:	f000 fae6 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000a84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f9fe 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aa2:	f000 facf 	bl	8001044 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3750      	adds	r7, #80	; 0x50
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_SPI5_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_SPI5_Init+0x64>)
 8000b0a:	f001 fbb1 	bl	8002270 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 fa96 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200002c8 	.word	0x200002c8
 8000b20:	40015000 	.word	0x40015000

08000b24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <MX_TIM11_Init+0x40>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 124;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b3c:	227c      	movs	r2, #124	; 0x7c
 8000b3e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_TIM11_Init+0x3c>)
 8000b4e:	f002 f965 	bl	8002e1c <HAL_TIM_Base_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8000b58:	f000 fa74 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000320 	.word	0x20000320
 8000b64:	40014800 	.word	0x40014800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
 8000b82:	4bb2      	ldr	r3, [pc, #712]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4ab1      	ldr	r2, [pc, #708]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4baf      	ldr	r3, [pc, #700]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	623b      	str	r3, [r7, #32]
 8000b98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	4bab      	ldr	r3, [pc, #684]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4aaa      	ldr	r2, [pc, #680]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4ba8      	ldr	r3, [pc, #672]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	61fb      	str	r3, [r7, #28]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4aa3      	ldr	r2, [pc, #652]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4ba1      	ldr	r3, [pc, #644]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	4b9d      	ldr	r3, [pc, #628]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a9c      	ldr	r2, [pc, #624]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b9a      	ldr	r3, [pc, #616]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b96      	ldr	r3, [pc, #600]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a95      	ldr	r2, [pc, #596]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b93      	ldr	r3, [pc, #588]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a8e      	ldr	r2, [pc, #568]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b88      	ldr	r3, [pc, #544]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a87      	ldr	r2, [pc, #540]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b85      	ldr	r3, [pc, #532]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b81      	ldr	r3, [pc, #516]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a80      	ldr	r2, [pc, #512]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b7e      	ldr	r3, [pc, #504]	; (8000e4c <MX_GPIO_Init+0x2e4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2116      	movs	r1, #22
 8000c62:	487b      	ldr	r0, [pc, #492]	; (8000e50 <MX_GPIO_Init+0x2e8>)
 8000c64:	f000 fe86 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	4879      	ldr	r0, [pc, #484]	; (8000e54 <MX_GPIO_Init+0x2ec>)
 8000c6e:	f000 fe81 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c78:	4877      	ldr	r0, [pc, #476]	; (8000e58 <MX_GPIO_Init+0x2f0>)
 8000c7a:	f000 fe7b 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c84:	4875      	ldr	r0, [pc, #468]	; (8000e5c <MX_GPIO_Init+0x2f4>)
 8000c86:	f000 fe75 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000c8a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	486e      	ldr	r0, [pc, #440]	; (8000e60 <MX_GPIO_Init+0x2f8>)
 8000ca8:	f000 fca0 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4865      	ldr	r0, [pc, #404]	; (8000e60 <MX_GPIO_Init+0x2f8>)
 8000cca:	f000 fc8f 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4859      	ldr	r0, [pc, #356]	; (8000e50 <MX_GPIO_Init+0x2e8>)
 8000cea:	f000 fc7f 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cee:	2316      	movs	r3, #22
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4852      	ldr	r0, [pc, #328]	; (8000e50 <MX_GPIO_Init+0x2e8>)
 8000d06:	f000 fc71 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d0e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484d      	ldr	r0, [pc, #308]	; (8000e54 <MX_GPIO_Init+0x2ec>)
 8000d20:	f000 fc64 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d24:	f248 0306 	movw	r3, #32774	; 0x8006
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4846      	ldr	r0, [pc, #280]	; (8000e54 <MX_GPIO_Init+0x2ec>)
 8000d3c:	f000 fc56 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000d40:	f641 0358 	movw	r3, #6232	; 0x1858
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d52:	230e      	movs	r3, #14
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	483d      	ldr	r0, [pc, #244]	; (8000e54 <MX_GPIO_Init+0x2ec>)
 8000d5e:	f000 fc45 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4836      	ldr	r0, [pc, #216]	; (8000e54 <MX_GPIO_Init+0x2ec>)
 8000d7a:	f000 fc37 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d82:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	482f      	ldr	r0, [pc, #188]	; (8000e50 <MX_GPIO_Init+0x2e8>)
 8000d94:	f000 fc2a 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000da8:	2309      	movs	r3, #9
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	482c      	ldr	r0, [pc, #176]	; (8000e64 <MX_GPIO_Init+0x2fc>)
 8000db4:	f000 fc1a 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000db8:	2304      	movs	r3, #4
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4826      	ldr	r0, [pc, #152]	; (8000e64 <MX_GPIO_Init+0x2fc>)
 8000dcc:	f000 fc0e 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000dd0:	f248 1333 	movw	r3, #33075	; 0x8133
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de2:	230c      	movs	r3, #12
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	481b      	ldr	r0, [pc, #108]	; (8000e5c <MX_GPIO_Init+0x2f4>)
 8000dee:	f000 fbfd 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000df2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e04:	230c      	movs	r3, #12
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <MX_GPIO_Init+0x300>)
 8000e10:	f000 fbec 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e14:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e26:	230e      	movs	r3, #14
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_GPIO_Init+0x2fc>)
 8000e32:	f000 fbdb 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000e36:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
 8000e48:	e010      	b.n	8000e6c <MX_GPIO_Init+0x304>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40021400 	.word	0x40021400
 8000e64:	40020400 	.word	0x40020400
 8000e68:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	486b      	ldr	r0, [pc, #428]	; (8001024 <MX_GPIO_Init+0x4bc>)
 8000e78:	f000 fbb8 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4864      	ldr	r0, [pc, #400]	; (8001024 <MX_GPIO_Init+0x4bc>)
 8000e92:	f000 fbab 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000e96:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	485d      	ldr	r0, [pc, #372]	; (8001028 <MX_GPIO_Init+0x4c0>)
 8000eb4:	f000 fb9a 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4856      	ldr	r0, [pc, #344]	; (8001028 <MX_GPIO_Init+0x4c0>)
 8000ece:	f000 fb8d 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ed2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	484f      	ldr	r0, [pc, #316]	; (8001028 <MX_GPIO_Init+0x4c0>)
 8000eec:	f000 fb7e 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ef0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f02:	230e      	movs	r3, #14
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4847      	ldr	r0, [pc, #284]	; (800102c <MX_GPIO_Init+0x4c4>)
 8000f0e:	f000 fb6d 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f12:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f24:	230e      	movs	r3, #14
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4840      	ldr	r0, [pc, #256]	; (8001030 <MX_GPIO_Init+0x4c8>)
 8000f30:	f000 fb5c 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f46:	2304      	movs	r3, #4
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4837      	ldr	r0, [pc, #220]	; (8001030 <MX_GPIO_Init+0x4c8>)
 8000f52:	f000 fb4b 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4830      	ldr	r0, [pc, #192]	; (8001034 <MX_GPIO_Init+0x4cc>)
 8000f74:	f000 fb3a 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4827      	ldr	r0, [pc, #156]	; (8001034 <MX_GPIO_Init+0x4cc>)
 8000f96:	f000 fb29 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f9a:	2348      	movs	r3, #72	; 0x48
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000faa:	230e      	movs	r3, #14
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_GPIO_Init+0x4c0>)
 8000fb6:	f000 fb19 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000fba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fcc:	2309      	movs	r3, #9
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4815      	ldr	r0, [pc, #84]	; (800102c <MX_GPIO_Init+0x4c4>)
 8000fd8:	f000 fb08 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000fdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_GPIO_Init+0x4c4>)
 8000ff6:	f000 faf9 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800100a:	230c      	movs	r3, #12
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <MX_GPIO_Init+0x4bc>)
 8001016:	f000 fae9 	bl	80015ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101a:	bf00      	nop
 800101c:	3738      	adds	r7, #56	; 0x38
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020400 	.word	0x40020400
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40021800 	.word	0x40021800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000

08001038 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osThreadExit();
 8001040:	f002 fa9e 	bl	8003580 <osThreadExit>

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <configureTimerForRunTimeStats>:


volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <configureTimerForRunTimeStats+0x14>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim11);
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <configureTimerForRunTimeStats+0x18>)
 800105c:	f001 ff2e 	bl	8002ebc <HAL_TIM_Base_Start_IT>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000036c 	.word	0x2000036c
 8001068:	20000320 	.word	0x20000320

0800106c <getRunTimeCounterValue>:


unsigned long getRunTimeCounterValue(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <getRunTimeCounterValue+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000036c 	.word	0x2000036c

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_MspInit+0x54>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_MspInit+0x54>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x54>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_MspInit+0x54>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_MspInit+0x54>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_MspInit+0x54>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	210f      	movs	r1, #15
 80010c6:	f06f 0001 	mvn.w	r0, #1
 80010ca:	f000 fa58 	bl	800157e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_SPI_MspInit+0x84>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12c      	bne.n	8001158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_SPI_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001136:	f44f 7360 	mov.w	r3, #896	; 0x380
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001148:	2305      	movs	r3, #5
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_SPI_MspInit+0x8c>)
 8001154:	f000 fa4a 	bl	80015ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40015000 	.word	0x40015000
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_TIM_Base_MspInit+0x48>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d115      	bne.n	80011aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2105      	movs	r1, #5
 800119e:	201a      	movs	r0, #26
 80011a0:	f000 f9ed 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80011a4:	201a      	movs	r0, #26
 80011a6:	f000 fa06 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40014800 	.word	0x40014800
 80011b8:	40023800 	.word	0x40023800

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f8a8 	bl	8001340 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011f0:	f003 fe98 	bl	8004f24 <xTaskGetSchedulerState>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011fa:	f004 fc7d 	bl	8005af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001210:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001214:	f001 fec2 	bl	8002f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000036c 	.word	0x2000036c
 8001220:	20000320 	.word	0x20000320

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001276:	f004 ff17 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff fb8d 	bl	8000998 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001280:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800128c:	08006294 	.word	0x08006294
  ldr r2, =_sbss
 8001290:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001294:	20004eac 	.word	0x20004eac

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f94f 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fed8 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f967 	bl	80015d2 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f92f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20000370 	.word	0x20000370

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000370 	.word	0x20000370

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e177      	b.n	80018f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8166 	bne.w	80018f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d005      	beq.n	800163e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	2b02      	cmp	r3, #2
 800163c:	d130      	bne.n	80016a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d017      	beq.n	80016dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80c0 	beq.w	80018f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b66      	ldr	r3, [pc, #408]	; (8001910 <HAL_GPIO_Init+0x324>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a65      	ldr	r2, [pc, #404]	; (8001910 <HAL_GPIO_Init+0x324>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_GPIO_Init+0x324>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a61      	ldr	r2, [pc, #388]	; (8001914 <HAL_GPIO_Init+0x328>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_GPIO_Init+0x32c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d037      	beq.n	800182a <HAL_GPIO_Init+0x23e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a57      	ldr	r2, [pc, #348]	; (800191c <HAL_GPIO_Init+0x330>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d031      	beq.n	8001826 <HAL_GPIO_Init+0x23a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_GPIO_Init+0x334>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02b      	beq.n	8001822 <HAL_GPIO_Init+0x236>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a55      	ldr	r2, [pc, #340]	; (8001924 <HAL_GPIO_Init+0x338>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d025      	beq.n	800181e <HAL_GPIO_Init+0x232>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_GPIO_Init+0x33c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01f      	beq.n	800181a <HAL_GPIO_Init+0x22e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a53      	ldr	r2, [pc, #332]	; (800192c <HAL_GPIO_Init+0x340>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x22a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_GPIO_Init+0x344>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x226>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a51      	ldr	r2, [pc, #324]	; (8001934 <HAL_GPIO_Init+0x348>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x222>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a50      	ldr	r2, [pc, #320]	; (8001938 <HAL_GPIO_Init+0x34c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x21e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_GPIO_Init+0x350>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x21a>
 8001802:	2309      	movs	r3, #9
 8001804:	e012      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001806:	230a      	movs	r3, #10
 8001808:	e010      	b.n	800182c <HAL_GPIO_Init+0x240>
 800180a:	2308      	movs	r3, #8
 800180c:	e00e      	b.n	800182c <HAL_GPIO_Init+0x240>
 800180e:	2307      	movs	r3, #7
 8001810:	e00c      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001812:	2306      	movs	r3, #6
 8001814:	e00a      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001816:	2305      	movs	r3, #5
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x240>
 800181a:	2304      	movs	r3, #4
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x240>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x240>
 800182a:	2300      	movs	r3, #0
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	4935      	ldr	r1, [pc, #212]	; (8001914 <HAL_GPIO_Init+0x328>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_GPIO_Init+0x354>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a34      	ldr	r2, [pc, #208]	; (8001940 <HAL_GPIO_Init+0x354>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_GPIO_Init+0x354>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a29      	ldr	r2, [pc, #164]	; (8001940 <HAL_GPIO_Init+0x354>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f67f ae84 	bls.w	8001608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40013800 	.word	0x40013800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020800 	.word	0x40020800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40021400 	.word	0x40021400
 8001930:	40021800 	.word	0x40021800
 8001934:	40021c00 	.word	0x40021c00
 8001938:	40022000 	.word	0x40022000
 800193c:	40022400 	.word	0x40022400
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e267      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d075      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d00c      	beq.n	80019ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d112      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ea:	d10b      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	4b7e      	ldr	r3, [pc, #504]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d05b      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x108>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d157      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e242      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d106      	bne.n	8001a1c <HAL_RCC_OscConfig+0x74>
 8001a0e:	4b76      	ldr	r3, [pc, #472]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a75      	ldr	r2, [pc, #468]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xb0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6f      	ldr	r2, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b6d      	ldr	r3, [pc, #436]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6c      	ldr	r2, [pc, #432]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xb0>
 8001a40:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a68      	ldr	r2, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fc82 	bl	8001368 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fc7e 	bl	8001368 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e207      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xc0>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fc6e 	bl	8001368 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fc6a 	bl	8001368 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1f3      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0xe8>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001abe:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b44      	ldr	r3, [pc, #272]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b41      	ldr	r3, [pc, #260]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x152>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1c7      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_OscConfig+0x244>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fc23 	bl	8001368 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff fc1f 	bl	8001368 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1a8      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4925      	ldr	r1, [pc, #148]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x244>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc02 	bl	8001368 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fbfe 	bl	8001368 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e187      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d036      	beq.n	8001c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_RCC_OscConfig+0x248>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fbe2 	bl	8001368 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fbde 	bl	8001368 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e167      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x200>
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x248>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fbcb 	bl	8001368 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	e00e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fbc7 	bl	8001368 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d907      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e150      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
 8001be8:	40023800 	.word	0x40023800
 8001bec:	42470000 	.word	0x42470000
 8001bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ea      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8097 	beq.w	8001d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b81      	ldr	r3, [pc, #516]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b7d      	ldr	r3, [pc, #500]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a7c      	ldr	r2, [pc, #496]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b77      	ldr	r3, [pc, #476]	; (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b74      	ldr	r3, [pc, #464]	; (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a73      	ldr	r2, [pc, #460]	; (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb87 	bl	8001368 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fb83 	bl	8001368 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e10c      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2ea>
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a63      	ldr	r2, [pc, #396]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x324>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x30c>
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a5e      	ldr	r2, [pc, #376]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0x324>
 8001cb4:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc0:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a54      	ldr	r2, [pc, #336]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	f023 0304 	bic.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d015      	beq.n	8001d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fb48 	bl	8001368 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fb44 	bl	8001368 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0cb      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ee      	beq.n	8001cdc <HAL_RCC_OscConfig+0x334>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff fb32 	bl	8001368 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb2e 	bl	8001368 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0b5      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ee      	bne.n	8001d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a1 	beq.w	8001e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d46:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d05c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d141      	bne.n	8001dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <HAL_RCC_OscConfig+0x478>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fb02 	bl	8001368 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff fafe 	bl	8001368 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e087      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	019b      	lsls	r3, r3, #6
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	491b      	ldr	r1, [pc, #108]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x478>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fad7 	bl	8001368 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff fad3 	bl	8001368 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e05c      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x416>
 8001ddc:	e054      	b.n	8001e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x478>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fac0 	bl	8001368 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fabc 	bl	8001368 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e045      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x444>
 8001e0a:	e03d      	b.n	8001e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e038      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4ec>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d028      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d121      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d11a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0cc      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 030f 	and.w	r3, r3, #15
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d90c      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b65      	ldr	r3, [pc, #404]	; (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0b8      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a58      	ldr	r2, [pc, #352]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f04:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	494d      	ldr	r1, [pc, #308]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d044      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b47      	ldr	r3, [pc, #284]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d119      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e07f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e067      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4934      	ldr	r1, [pc, #208]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7ff f9ee 	bl	8001368 <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7ff f9ea 	bl	8001368 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e04f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d20c      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e032      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4916      	ldr	r1, [pc, #88]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	490e      	ldr	r1, [pc, #56]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800201e:	f000 f821 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	490a      	ldr	r1, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f94e 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023c00 	.word	0x40023c00
 8002054:	40023800 	.word	0x40023800
 8002058:	08006274 	.word	0x08006274
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002068:	b094      	sub	sp, #80	; 0x50
 800206a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
 8002070:	2300      	movs	r3, #0
 8002072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002074:	2300      	movs	r3, #0
 8002076:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207c:	4b79      	ldr	r3, [pc, #484]	; (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d00d      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002088:	2b08      	cmp	r3, #8
 800208a:	f200 80e1 	bhi.w	8002250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x34>
 8002092:	2b04      	cmp	r3, #4
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x3a>
 8002096:	e0db      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_GetSysClockFreq+0x204>)
 800209a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800209c:	e0db      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_GetSysClockFreq+0x208>)
 80020a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020a2:	e0d8      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a4:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ba:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	2200      	movs	r2, #0
 80020c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
 80020d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020d6:	4622      	mov	r2, r4
 80020d8:	462b      	mov	r3, r5
 80020da:	f04f 0000 	mov.w	r0, #0
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	0159      	lsls	r1, r3, #5
 80020e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e8:	0150      	lsls	r0, r2, #5
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4621      	mov	r1, r4
 80020f0:	1a51      	subs	r1, r2, r1
 80020f2:	6139      	str	r1, [r7, #16]
 80020f4:	4629      	mov	r1, r5
 80020f6:	eb63 0301 	sbc.w	r3, r3, r1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002108:	4659      	mov	r1, fp
 800210a:	018b      	lsls	r3, r1, #6
 800210c:	4651      	mov	r1, sl
 800210e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002112:	4651      	mov	r1, sl
 8002114:	018a      	lsls	r2, r1, #6
 8002116:	4651      	mov	r1, sl
 8002118:	ebb2 0801 	subs.w	r8, r2, r1
 800211c:	4659      	mov	r1, fp
 800211e:	eb63 0901 	sbc.w	r9, r3, r1
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800212e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002136:	4690      	mov	r8, r2
 8002138:	4699      	mov	r9, r3
 800213a:	4623      	mov	r3, r4
 800213c:	eb18 0303 	adds.w	r3, r8, r3
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	462b      	mov	r3, r5
 8002144:	eb49 0303 	adc.w	r3, r9, r3
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002156:	4629      	mov	r1, r5
 8002158:	024b      	lsls	r3, r1, #9
 800215a:	4621      	mov	r1, r4
 800215c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002160:	4621      	mov	r1, r4
 8002162:	024a      	lsls	r2, r1, #9
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216a:	2200      	movs	r2, #0
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
 800216e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002174:	f7fe f83c 	bl	80001f0 <__aeabi_uldivmod>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4613      	mov	r3, r2
 800217e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002180:	e058      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	2200      	movs	r2, #0
 800218a:	4618      	mov	r0, r3
 800218c:	4611      	mov	r1, r2
 800218e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800219c:	4642      	mov	r2, r8
 800219e:	464b      	mov	r3, r9
 80021a0:	f04f 0000 	mov.w	r0, #0
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	0159      	lsls	r1, r3, #5
 80021aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ae:	0150      	lsls	r0, r2, #5
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4641      	mov	r1, r8
 80021b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ba:	4649      	mov	r1, r9
 80021bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021d4:	ebb2 040a 	subs.w	r4, r2, sl
 80021d8:	eb63 050b 	sbc.w	r5, r3, fp
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	00eb      	lsls	r3, r5, #3
 80021e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ea:	00e2      	lsls	r2, r4, #3
 80021ec:	4614      	mov	r4, r2
 80021ee:	461d      	mov	r5, r3
 80021f0:	4643      	mov	r3, r8
 80021f2:	18e3      	adds	r3, r4, r3
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	464b      	mov	r3, r9
 80021f8:	eb45 0303 	adc.w	r3, r5, r3
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220a:	4629      	mov	r1, r5
 800220c:	028b      	lsls	r3, r1, #10
 800220e:	4621      	mov	r1, r4
 8002210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002214:	4621      	mov	r1, r4
 8002216:	028a      	lsls	r2, r1, #10
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221e:	2200      	movs	r2, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	61fa      	str	r2, [r7, #28]
 8002224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002228:	f7fd ffe2 	bl	80001f0 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4613      	mov	r3, r2
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002244:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224e:	e002      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetSysClockFreq+0x204>)
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002258:	4618      	mov	r0, r3
 800225a:	3750      	adds	r7, #80	; 0x50
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200

08002270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07b      	b.n	800237a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002292:	d009      	beq.n	80022a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
 800229a:	e005      	b.n	80022a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe ff0a 	bl	80010dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	ea42 0103 	orr.w	r1, r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	f003 0104 	and.w	r1, r3, #4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f003 0210 	and.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b088      	sub	sp, #32
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_SPI_Transmit+0x22>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e12d      	b.n	8002600 <HAL_SPI_Transmit+0x27e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ac:	f7fe ffdc 	bl	8001368 <HAL_GetTick>
 80023b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d002      	beq.n	80023c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023c6:	e116      	b.n	80025f6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_SPI_Transmit+0x52>
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023d8:	e10d      	b.n	80025f6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2203      	movs	r2, #3
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002420:	d10f      	bne.n	8002442 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002440:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d007      	beq.n	8002460 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002468:	d14f      	bne.n	800250a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_SPI_Transmit+0xf6>
 8002472:	8afb      	ldrh	r3, [r7, #22]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d142      	bne.n	80024fe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	1c9a      	adds	r2, r3, #2
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800249c:	e02f      	b.n	80024fe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d112      	bne.n	80024d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	881a      	ldrh	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	1c9a      	adds	r2, r3, #2
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80024d0:	e015      	b.n	80024fe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d2:	f7fe ff49 	bl	8001368 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d803      	bhi.n	80024ea <HAL_SPI_Transmit+0x168>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d102      	bne.n	80024f0 <HAL_SPI_Transmit+0x16e>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80024fc:	e07b      	b.n	80025f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ca      	bne.n	800249e <HAL_SPI_Transmit+0x11c>
 8002508:	e050      	b.n	80025ac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_SPI_Transmit+0x196>
 8002512:	8afb      	ldrh	r3, [r7, #22]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d144      	bne.n	80025a2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800253e:	e030      	b.n	80025a2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d113      	bne.n	8002576 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	86da      	strh	r2, [r3, #54]	; 0x36
 8002574:	e015      	b.n	80025a2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002576:	f7fe fef7 	bl	8001368 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d803      	bhi.n	800258e <HAL_SPI_Transmit+0x20c>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Transmit+0x212>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d106      	bne.n	80025a2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025a0:	e029      	b.n	80025f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1c9      	bne.n	8002540 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	6839      	ldr	r1, [r7, #0]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fbdf 	bl	8002d74 <SPI_EndRxTxTransaction>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	77fb      	strb	r3, [r7, #31]
 80025ec:	e003      	b.n	80025f6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d002      	beq.n	800262e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800262c:	e0fb      	b.n	8002826 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002636:	d112      	bne.n	800265e <HAL_SPI_Receive+0x56>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10e      	bne.n	800265e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2204      	movs	r2, #4
 8002644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f8ef 	bl	8002838 <HAL_SPI_TransmitReceive>
 800265a:	4603      	mov	r3, r0
 800265c:	e0e8      	b.n	8002830 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_SPI_Receive+0x64>
 8002668:	2302      	movs	r3, #2
 800266a:	e0e1      	b.n	8002830 <HAL_SPI_Receive+0x228>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002674:	f7fe fe78 	bl	8001368 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_SPI_Receive+0x7e>
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800268a:	e0cc      	b.n	8002826 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2204      	movs	r2, #4
 8002690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d2:	d10f      	bne.n	80026f4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d007      	beq.n	8002712 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d16a      	bne.n	80027f0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800271a:	e032      	b.n	8002782 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d115      	bne.n	8002756 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f103 020c 	add.w	r2, r3, #12
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	7812      	ldrb	r2, [r2, #0]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002754:	e015      	b.n	8002782 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002756:	f7fe fe07 	bl	8001368 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d803      	bhi.n	800276e <HAL_SPI_Receive+0x166>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d102      	bne.n	8002774 <HAL_SPI_Receive+0x16c>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002780:	e051      	b.n	8002826 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1c7      	bne.n	800271c <HAL_SPI_Receive+0x114>
 800278c:	e035      	b.n	80027fa <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d113      	bne.n	80027c4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	b292      	uxth	r2, r2
 80027a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	1c9a      	adds	r2, r3, #2
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027c2:	e015      	b.n	80027f0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027c4:	f7fe fdd0 	bl	8001368 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d803      	bhi.n	80027dc <HAL_SPI_Receive+0x1d4>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d102      	bne.n	80027e2 <HAL_SPI_Receive+0x1da>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027ee:	e01a      	b.n	8002826 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1c9      	bne.n	800278e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa52 	bl	8002ca8 <SPI_EndRxTransaction>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
 800281c:	e003      	b.n	8002826 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_SPI_TransmitReceive+0x26>
 800285a:	2302      	movs	r3, #2
 800285c:	e198      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x358>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002866:	f7fe fd7f 	bl	8001368 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002884:	2b01      	cmp	r3, #1
 8002886:	d00f      	beq.n	80028a8 <HAL_SPI_TransmitReceive+0x70>
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288e:	d107      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x68>
 8002898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800289c:	2b04      	cmp	r3, #4
 800289e:	d003      	beq.n	80028a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
 80028a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028a6:	e16d      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_SPI_TransmitReceive+0x82>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_SPI_TransmitReceive+0x82>
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028c0:	e160      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d003      	beq.n	80028d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2205      	movs	r2, #5
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	887a      	ldrh	r2, [r7, #2]
 80028fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d007      	beq.n	800292a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002932:	d17c      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_SPI_TransmitReceive+0x10a>
 800293c:	8b7b      	ldrh	r3, [r7, #26]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d16a      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	1c9a      	adds	r2, r3, #2
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002966:	e057      	b.n	8002a18 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d11b      	bne.n	80029ae <HAL_SPI_TransmitReceive+0x176>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d016      	beq.n	80029ae <HAL_SPI_TransmitReceive+0x176>
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d113      	bne.n	80029ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	881a      	ldrh	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	1c9a      	adds	r2, r3, #2
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d119      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x1b8>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d014      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	b292      	uxth	r2, r2
 80029d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	1c9a      	adds	r2, r3, #2
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029ec:	2301      	movs	r3, #1
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029f0:	f7fe fcba 	bl	8001368 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d80b      	bhi.n	8002a18 <HAL_SPI_TransmitReceive+0x1e0>
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d007      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a16:	e0b5      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1a2      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x130>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d19d      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x130>
 8002a2c:	e080      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_SPI_TransmitReceive+0x204>
 8002a36:	8b7b      	ldrh	r3, [r7, #26]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d16f      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a62:	e05b      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11c      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x274>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d017      	beq.n	8002aac <HAL_SPI_TransmitReceive+0x274>
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d114      	bne.n	8002aac <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	7812      	ldrb	r2, [r2, #0]
 8002a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d119      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x2b6>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d014      	beq.n	8002aee <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aee:	f7fe fc3b 	bl	8001368 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d803      	bhi.n	8002b06 <HAL_SPI_TransmitReceive+0x2ce>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_TransmitReceive+0x2d4>
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b1a:	e033      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d19e      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x22c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d199      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f91d 	bl	8002d74 <SPI_EndRxTxTransaction>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b4c:	e01a      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7a:	e003      	b.n	8002b84 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3730      	adds	r7, #48	; 0x30
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ba8:	f7fe fbde 	bl	8001368 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bb8:	f7fe fbd6 	bl	8001368 <HAL_GetTick>
 8002bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	015b      	lsls	r3, r3, #5
 8002bc4:	0d1b      	lsrs	r3, r3, #20
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bce:	e054      	b.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d050      	beq.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bd8:	f7fe fbc6 	bl	8001368 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d902      	bls.n	8002bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d13d      	bne.n	8002c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c06:	d111      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d004      	beq.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d107      	bne.n	8002c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c34:	d10f      	bne.n	8002c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e017      	b.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d19b      	bne.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cbc:	d111      	bne.n	8002ce2 <SPI_EndRxTransaction+0x3a>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc6:	d004      	beq.n	8002cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd0:	d107      	bne.n	8002ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cea:	d12a      	bne.n	8002d42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d012      	beq.n	8002d1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff ff49 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02d      	beq.n	8002d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e026      	b.n	8002d6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2101      	movs	r1, #1
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff ff36 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e013      	b.n	8002d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff ff23 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e000      	b.n	8002d6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2201      	movs	r2, #1
 8002d88:	2102      	movs	r1, #2
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f7ff ff04 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e032      	b.n	8002e0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <SPI_EndRxTxTransaction+0xa0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <SPI_EndRxTxTransaction+0xa4>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	0d5b      	lsrs	r3, r3, #21
 8002db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc4:	d112      	bne.n	8002dec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fee1 	bl	8002b98 <SPI_WaitFlagStateUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d016      	beq.n	8002e0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e00f      	b.n	8002e0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d0f2      	beq.n	8002dec <SPI_EndRxTxTransaction+0x78>
 8002e06:	e000      	b.n	8002e0a <SPI_EndRxTxTransaction+0x96>
        break;
 8002e08:	bf00      	nop
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000000 	.word	0x20000000
 8002e18:	165e9f81 	.word	0x165e9f81

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e041      	b.n	8002eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe f992 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 f9c0 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e04e      	b.n	8002f72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d022      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d01d      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d018      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	; (8002f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d013      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x80>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d010      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	e007      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40010400 	.word	0x40010400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40001800 	.word	0x40001800

08002f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d020      	beq.n	8003000 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0202 	mvn.w	r2, #2
 8002fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8dc 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8ce 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8df 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d020      	beq.n	800304c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0204 	mvn.w	r2, #4
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8b6 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8a8 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8b9 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d020      	beq.n	8003098 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0208 	mvn.w	r2, #8
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f890 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f882 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f893 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d020      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2208      	movs	r2, #8
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f86a 	bl	80031a4 <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f85c 	bl	8003190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f86d 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0201 	mvn.w	r2, #1
 8003100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f83a 	bl	800317c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f910 	bl	800334c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f83e 	bl	80031cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0220 	mvn.w	r2, #32
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8e2 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a46      	ldr	r2, [pc, #280]	; (800330c <TIM_Base_SetConfig+0x12c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d00f      	beq.n	8003220 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a43      	ldr	r2, [pc, #268]	; (8003310 <TIM_Base_SetConfig+0x130>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a42      	ldr	r2, [pc, #264]	; (8003314 <TIM_Base_SetConfig+0x134>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a41      	ldr	r2, [pc, #260]	; (8003318 <TIM_Base_SetConfig+0x138>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a40      	ldr	r2, [pc, #256]	; (800331c <TIM_Base_SetConfig+0x13c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d108      	bne.n	8003232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a35      	ldr	r2, [pc, #212]	; (800330c <TIM_Base_SetConfig+0x12c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02b      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d027      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a32      	ldr	r2, [pc, #200]	; (8003310 <TIM_Base_SetConfig+0x130>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d023      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a31      	ldr	r2, [pc, #196]	; (8003314 <TIM_Base_SetConfig+0x134>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a30      	ldr	r2, [pc, #192]	; (8003318 <TIM_Base_SetConfig+0x138>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01b      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2f      	ldr	r2, [pc, #188]	; (800331c <TIM_Base_SetConfig+0x13c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d017      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2e      	ldr	r2, [pc, #184]	; (8003320 <TIM_Base_SetConfig+0x140>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2d      	ldr	r2, [pc, #180]	; (8003324 <TIM_Base_SetConfig+0x144>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00f      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <TIM_Base_SetConfig+0x148>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00b      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2b      	ldr	r2, [pc, #172]	; (800332c <TIM_Base_SetConfig+0x14c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <TIM_Base_SetConfig+0x150>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d003      	beq.n	8003292 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a29      	ldr	r2, [pc, #164]	; (8003334 <TIM_Base_SetConfig+0x154>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d108      	bne.n	80032a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <TIM_Base_SetConfig+0x12c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0xf8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <TIM_Base_SetConfig+0x13c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f023 0201 	bic.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	611a      	str	r2, [r3, #16]
  }
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800
 800332c:	40001800 	.word	0x40001800
 8003330:	40001c00 	.word	0x40001c00
 8003334:	40002000 	.word	0x40002000

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <__NVIC_SetPriority>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80033b8:	2100      	movs	r1, #0
 80033ba:	f06f 0004 	mvn.w	r0, #4
 80033be:	f7ff ffcf 	bl	8003360 <__NVIC_SetPriority>
#endif
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033ce:	f3ef 8305 	mrs	r3, IPSR
 80033d2:	603b      	str	r3, [r7, #0]
  return(result);
 80033d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80033da:	f06f 0305 	mvn.w	r3, #5
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	e00c      	b.n	80033fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <osKernelInitialize+0x44>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <osKernelInitialize+0x44>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	e002      	b.n	80033fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000374 	.word	0x20000374

08003410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003416:	f3ef 8305 	mrs	r3, IPSR
 800341a:	603b      	str	r3, [r7, #0]
  return(result);
 800341c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003422:	f06f 0305 	mvn.w	r3, #5
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	e010      	b.n	800344c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <osKernelStart+0x48>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d109      	bne.n	8003446 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003432:	f7ff ffbf 	bl	80033b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <osKernelStart+0x48>)
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800343c:	f001 f8f8 	bl	8004630 <vTaskStartScheduler>
      stat = osOK;
 8003440:	2300      	movs	r3, #0
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	e002      	b.n	800344c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000374 	.word	0x20000374

0800345c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af04      	add	r7, sp, #16
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800346c:	f3ef 8305 	mrs	r3, IPSR
 8003470:	617b      	str	r3, [r7, #20]
  return(result);
 8003472:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003474:	2b00      	cmp	r3, #0
 8003476:	d17e      	bne.n	8003576 <osThreadNew+0x11a>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d07b      	beq.n	8003576 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003482:	2318      	movs	r3, #24
 8003484:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d045      	beq.n	8003522 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <osThreadNew+0x48>
        name = attr->name;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <osThreadNew+0x6e>
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b38      	cmp	r3, #56	; 0x38
 80034bc:	d805      	bhi.n	80034ca <osThreadNew+0x6e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <osThreadNew+0x72>
        return (NULL);
 80034ca:	2300      	movs	r3, #0
 80034cc:	e054      	b.n	8003578 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00e      	beq.n	8003504 <osThreadNew+0xa8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2bab      	cmp	r3, #171	; 0xab
 80034ec:	d90a      	bls.n	8003504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <osThreadNew+0xa8>
        mem = 1;
 80034fe:	2301      	movs	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e010      	b.n	8003526 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10c      	bne.n	8003526 <osThreadNew+0xca>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <osThreadNew+0xca>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <osThreadNew+0xca>
          mem = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	e001      	b.n	8003526 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d110      	bne.n	800354e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003534:	9202      	str	r2, [sp, #8]
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fe12 	bl	800416c <xTaskCreateStatic>
 8003548:	4603      	mov	r3, r0
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e013      	b.n	8003576 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d110      	bne.n	8003576 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	b29a      	uxth	r2, r3
 8003558:	f107 0310 	add.w	r3, r7, #16
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fe5d 	bl	8004226 <xTaskCreate>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <osThreadNew+0x11a>
            hTask = NULL;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003576:	693b      	ldr	r3, [r7, #16]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8003584:	2000      	movs	r0, #0
 8003586:	f000 ffad 	bl	80044e4 <vTaskDelete>
#endif
  for (;;);
 800358a:	e7fe      	b.n	800358a <osThreadExit+0xa>

0800358c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003594:	f3ef 8305 	mrs	r3, IPSR
 8003598:	60bb      	str	r3, [r7, #8]
  return(result);
 800359a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <osDelay+0x1c>
    stat = osErrorISR;
 80035a0:	f06f 0305 	mvn.w	r3, #5
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e007      	b.n	80035b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 f808 	bl	80045c8 <vTaskDelay>
    }
  }

  return (stat);
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a07      	ldr	r2, [pc, #28]	; (80035f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80035d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <vApplicationGetIdleTaskMemory+0x30>)
 80035da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000378 	.word	0x20000378
 80035f4:	20000424 	.word	0x20000424

080035f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a07      	ldr	r2, [pc, #28]	; (8003624 <vApplicationGetTimerTaskMemory+0x2c>)
 8003608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4a06      	ldr	r2, [pc, #24]	; (8003628 <vApplicationGetTimerTaskMemory+0x30>)
 800360e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003616:	601a      	str	r2, [r3, #0]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20000624 	.word	0x20000624
 8003628:	200006d0 	.word	0x200006d0

0800362c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f103 0208 	add.w	r2, r3, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f04f 32ff 	mov.w	r2, #4294967295
 8003644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f103 0208 	add.w	r2, r3, #8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f103 0208 	add.w	r2, r3, #8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	601a      	str	r2, [r3, #0]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ce:	b480      	push	{r7}
 80036d0:	b085      	sub	sp, #20
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d103      	bne.n	80036ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e00c      	b.n	8003708 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3308      	adds	r3, #8
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e002      	b.n	80036fc <vListInsert+0x2e>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d2f6      	bcs.n	80036f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6852      	ldr	r2, [r2, #4]
 8003760:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d103      	bne.n	8003774 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1e5a      	subs	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037be:	f002 f909 	bl	80059d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	441a      	add	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	3b01      	subs	r3, #1
 80037f0:	68f9      	ldr	r1, [r7, #12]
 80037f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	441a      	add	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	22ff      	movs	r2, #255	; 0xff
 800380a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d114      	bne.n	800383e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01a      	beq.n	8003852 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3310      	adds	r3, #16
 8003820:	4618      	mov	r0, r3
 8003822:	f001 f9bd 	bl	8004ba0 <xTaskRemoveFromEventList>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <xQueueGenericReset+0xcc>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	e009      	b.n	8003852 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3310      	adds	r3, #16
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fef2 	bl	800362c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3324      	adds	r3, #36	; 0x24
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff feed 	bl	800362c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003852:	f002 f8ef 	bl	8005a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	; 0x38
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <xQueueGenericCreateStatic+0x52>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <xQueueGenericCreateStatic+0x56>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <xQueueGenericCreateStatic+0x58>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	623b      	str	r3, [r7, #32]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <xQueueGenericCreateStatic+0x7e>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <xQueueGenericCreateStatic+0x82>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueGenericCreateStatic+0x84>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	61fb      	str	r3, [r7, #28]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003902:	2350      	movs	r3, #80	; 0x50
 8003904:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b50      	cmp	r3, #80	; 0x50
 800390a:	d00a      	beq.n	8003922 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	61bb      	str	r3, [r7, #24]
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003922:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003936:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f805 	bl	8003954 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800394c:	4618      	mov	r0, r3
 800394e:	3730      	adds	r7, #48	; 0x30
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e002      	b.n	8003976 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003982:	2101      	movs	r1, #1
 8003984:	69b8      	ldr	r0, [r7, #24]
 8003986:	f7ff ff05 	bl	8003794 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08e      	sub	sp, #56	; 0x38
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039aa:	2300      	movs	r3, #0
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericSend+0x32>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <xQueueGenericSend+0x40>
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <xQueueGenericSend+0x44>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <xQueueGenericSend+0x46>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <xQueueGenericSend+0x60>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d103      	bne.n	8003a0a <xQueueGenericSend+0x6e>
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <xQueueGenericSend+0x72>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueGenericSend+0x74>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueGenericSend+0x8e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	623b      	str	r3, [r7, #32]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a2a:	f001 fa7b 	bl	8004f24 <xTaskGetSchedulerState>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xQueueGenericSend+0x9e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <xQueueGenericSend+0xa2>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <xQueueGenericSend+0xa4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <xQueueGenericSend+0xbe>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	61fb      	str	r3, [r7, #28]
}
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a5a:	f001 ffbb 	bl	80059d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <xQueueGenericSend+0xd4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d129      	bne.n	8003ac4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a76:	f000 fa0b 	bl	8003e90 <prvCopyDataToQueue>
 8003a7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	3324      	adds	r3, #36	; 0x24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f889 	bl	8004ba0 <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a94:	4b3f      	ldr	r3, [pc, #252]	; (8003b94 <xQueueGenericSend+0x1f8>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	e00a      	b.n	8003abc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003aac:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <xQueueGenericSend+0x1f8>)
 8003aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003abc:	f001 ffba 	bl	8005a34 <vPortExitCritical>
				return pdPASS;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e063      	b.n	8003b8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aca:	f001 ffb3 	bl	8005a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e05c      	b.n	8003b8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f8c3 	bl	8004c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ae6:	f001 ffa5 	bl	8005a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aea:	f000 fe13 	bl	8004714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aee:	f001 ff71 	bl	80059d4 <vPortEnterCritical>
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d103      	bne.n	8003b08 <xQueueGenericSend+0x16c>
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d103      	bne.n	8003b1e <xQueueGenericSend+0x182>
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b1e:	f001 ff89 	bl	8005a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b22:	1d3a      	adds	r2, r7, #4
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f8b2 	bl	8004c94 <xTaskCheckForTimeOut>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d124      	bne.n	8003b80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b38:	f000 faa2 	bl	8004080 <prvIsQueueFull>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	3310      	adds	r3, #16
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 ffd8 	bl	8004b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b52:	f000 fa2d 	bl	8003fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b56:	f000 fdeb 	bl	8004730 <xTaskResumeAll>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af7c 	bne.w	8003a5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <xQueueGenericSend+0x1f8>)
 8003b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	e772      	b.n	8003a5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b76:	f000 fa1b 	bl	8003fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b7a:	f000 fdd9 	bl	8004730 <xTaskResumeAll>
 8003b7e:	e76c      	b.n	8003a5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b82:	f000 fa15 	bl	8003fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b86:	f000 fdd3 	bl	8004730 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3738      	adds	r7, #56	; 0x38
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b090      	sub	sp, #64	; 0x40
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <xQueueGenericSendFromISR+0x3c>
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueGenericSendFromISR+0x40>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueGenericSendFromISR+0x42>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d103      	bne.n	8003c02 <xQueueGenericSendFromISR+0x6a>
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <xQueueGenericSendFromISR+0x6e>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <xQueueGenericSendFromISR+0x70>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	623b      	str	r3, [r7, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c22:	f001 ffb9 	bl	8005b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c26:	f3ef 8211 	mrs	r2, BASEPRI
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	61fa      	str	r2, [r7, #28]
 8003c3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <xQueueGenericSendFromISR+0xbc>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d12f      	bne.n	8003cb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c6a:	f000 f911 	bl	8003e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d112      	bne.n	8003c9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d016      	beq.n	8003cae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	3324      	adds	r3, #36	; 0x24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 ff8b 	bl	8004ba0 <xTaskRemoveFromEventList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00e      	beq.n	8003cae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e007      	b.n	8003cae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	b25a      	sxtb	r2, r3
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003cb2:	e001      	b.n	8003cb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3740      	adds	r7, #64	; 0x40
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xQueueReceive+0x30>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	623b      	str	r3, [r7, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <xQueueReceive+0x3e>
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <xQueueReceive+0x42>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <xQueueReceive+0x44>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xQueueReceive+0x5e>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	61fb      	str	r3, [r7, #28]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d2e:	f001 f8f9 	bl	8004f24 <xTaskGetSchedulerState>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d102      	bne.n	8003d3e <xQueueReceive+0x6e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <xQueueReceive+0x72>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <xQueueReceive+0x74>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <xQueueReceive+0x8e>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	61bb      	str	r3, [r7, #24]
}
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d5e:	f001 fe39 	bl	80059d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01f      	beq.n	8003dae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d72:	f000 f8f7 	bl	8003f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00f      	beq.n	8003da6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	3310      	adds	r3, #16
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ff08 	bl	8004ba0 <xTaskRemoveFromEventList>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <xQueueReceive+0x1bc>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003da6:	f001 fe45 	bl	8005a34 <vPortExitCritical>
				return pdPASS;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e069      	b.n	8003e82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003db4:	f001 fe3e 	bl	8005a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e062      	b.n	8003e82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 ff4e 	bl	8004c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dd0:	f001 fe30 	bl	8005a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dd4:	f000 fc9e 	bl	8004714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dd8:	f001 fdfc 	bl	80059d4 <vPortEnterCritical>
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d103      	bne.n	8003df2 <xQueueReceive+0x122>
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d103      	bne.n	8003e08 <xQueueReceive+0x138>
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e08:	f001 fe14 	bl	8005a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e0c:	1d3a      	adds	r2, r7, #4
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 ff3d 	bl	8004c94 <xTaskCheckForTimeOut>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d123      	bne.n	8003e68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e22:	f000 f917 	bl	8004054 <prvIsQueueEmpty>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d017      	beq.n	8003e5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	3324      	adds	r3, #36	; 0x24
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fe63 	bl	8004b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e3c:	f000 f8b8 	bl	8003fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e40:	f000 fc76 	bl	8004730 <xTaskResumeAll>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d189      	bne.n	8003d5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003e4a:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <xQueueReceive+0x1bc>)
 8003e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	e780      	b.n	8003d5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e5e:	f000 f8a7 	bl	8003fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e62:	f000 fc65 	bl	8004730 <xTaskResumeAll>
 8003e66:	e77a      	b.n	8003d5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6a:	f000 f8a1 	bl	8003fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e6e:	f000 fc5f 	bl	8004730 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e74:	f000 f8ee 	bl	8004054 <prvIsQueueEmpty>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f43f af6f 	beq.w	8003d5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10d      	bne.n	8003eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d14d      	bne.n	8003f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f850 	bl	8004f60 <xTaskPriorityDisinherit>
 8003ec0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	e043      	b.n	8003f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d119      	bne.n	8003f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6858      	ldr	r0, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	f002 f90a 	bl	80060f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	441a      	add	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d32b      	bcc.n	8003f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	e026      	b.n	8003f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68d8      	ldr	r0, [r3, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	f002 f8f0 	bl	80060f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	425b      	negs	r3, r3
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d207      	bcs.n	8003f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	425b      	negs	r3, r3
 8003f3a:	441a      	add	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d105      	bne.n	8003f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f5a:	697b      	ldr	r3, [r7, #20]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	441a      	add	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d303      	bcc.n	8003f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68d9      	ldr	r1, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6838      	ldr	r0, [r7, #0]
 8003fa4:	f002 f8a6 	bl	80060f4 <memcpy>
	}
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fb8:	f001 fd0c 	bl	80059d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fc4:	e011      	b.n	8003fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d012      	beq.n	8003ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fde4 	bl	8004ba0 <xTaskRemoveFromEventList>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fde:	f000 febb 	bl	8004d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	dce9      	bgt.n	8003fc6 <prvUnlockQueue+0x16>
 8003ff2:	e000      	b.n	8003ff6 <prvUnlockQueue+0x46>
					break;
 8003ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ffe:	f001 fd19 	bl	8005a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004002:	f001 fce7 	bl	80059d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800400c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800400e:	e011      	b.n	8004034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d012      	beq.n	800403e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3310      	adds	r3, #16
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fdbf 	bl	8004ba0 <xTaskRemoveFromEventList>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004028:	f000 fe96 	bl	8004d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800402c:	7bbb      	ldrb	r3, [r7, #14]
 800402e:	3b01      	subs	r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004038:	2b00      	cmp	r3, #0
 800403a:	dce9      	bgt.n	8004010 <prvUnlockQueue+0x60>
 800403c:	e000      	b.n	8004040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800403e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	22ff      	movs	r2, #255	; 0xff
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004048:	f001 fcf4 	bl	8005a34 <vPortExitCritical>
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800405c:	f001 fcba 	bl	80059d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e001      	b.n	8004072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004072:	f001 fcdf 	bl	8005a34 <vPortExitCritical>

	return xReturn;
 8004076:	68fb      	ldr	r3, [r7, #12]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004088:	f001 fca4 	bl	80059d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	429a      	cmp	r2, r3
 8004096:	d102      	bne.n	800409e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004098:	2301      	movs	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e001      	b.n	80040a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040a2:	f001 fcc7 	bl	8005a34 <vPortExitCritical>

	return xReturn;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e014      	b.n	80040ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040c0:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <vQueueAddToRegistry+0x50>)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <vQueueAddToRegistry+0x50>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <vQueueAddToRegistry+0x50>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040e2:	e006      	b.n	80040f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b07      	cmp	r3, #7
 80040ee:	d9e7      	bls.n	80040c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000ad0 	.word	0x20000ad0

08004104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004114:	f001 fc5e 	bl	80059d4 <vPortEnterCritical>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800411e:	b25b      	sxtb	r3, r3
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d103      	bne.n	800412e <vQueueWaitForMessageRestricted+0x2a>
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004134:	b25b      	sxtb	r3, r3
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d103      	bne.n	8004144 <vQueueWaitForMessageRestricted+0x40>
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004144:	f001 fc76 	bl	8005a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fcf5 	bl	8004b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7ff ff26 	bl	8003fb0 <prvUnlockQueue>
	}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	; 0x38
 8004170:	af04      	add	r7, sp, #16
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800417a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	623b      	str	r3, [r7, #32]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	61fb      	str	r3, [r7, #28]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041b2:	23ac      	movs	r3, #172	; 0xac
 80041b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2bac      	cmp	r3, #172	; 0xac
 80041ba:	d00a      	beq.n	80041d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	61bb      	str	r3, [r7, #24]
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01e      	beq.n	8004218 <xTaskCreateStatic+0xac>
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041f2:	2300      	movs	r3, #0
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f850 	bl	80042b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004212:	f000 f8f7 	bl	8004404 <prvAddNewTaskToReadyList>
 8004216:	e001      	b.n	800421c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800421c:	697b      	ldr	r3, [r7, #20]
	}
 800421e:	4618      	mov	r0, r3
 8004220:	3728      	adds	r7, #40	; 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004226:	b580      	push	{r7, lr}
 8004228:	b08c      	sub	sp, #48	; 0x30
 800422a:	af04      	add	r7, sp, #16
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f001 fcec 	bl	8005c18 <pvPortMalloc>
 8004240:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004248:	20ac      	movs	r0, #172	; 0xac
 800424a:	f001 fce5 	bl	8005c18 <pvPortMalloc>
 800424e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
 800425c:	e005      	b.n	800426a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800425e:	6978      	ldr	r0, [r7, #20]
 8004260:	f001 fda6 	bl	8005db0 <vPortFree>
 8004264:	e001      	b.n	800426a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d017      	beq.n	80042a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	2300      	movs	r3, #0
 800427c:	9303      	str	r3, [sp, #12]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	9302      	str	r3, [sp, #8]
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f80e 	bl	80042b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004294:	69f8      	ldr	r0, [r7, #28]
 8004296:	f000 f8b5 	bl	8004404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800429a:	2301      	movs	r3, #1
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e002      	b.n	80042a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042a6:	69bb      	ldr	r3, [r7, #24]
	}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	461a      	mov	r2, r3
 80042c8:	21a5      	movs	r1, #165	; 0xa5
 80042ca:	f001 fe8f 	bl	8005fec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042d8:	3b01      	subs	r3, #1
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f023 0307 	bic.w	r3, r3, #7
 80042e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	617b      	str	r3, [r7, #20]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01f      	beq.n	800434e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e012      	b.n	800433a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	7819      	ldrb	r1, [r3, #0]
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	3334      	adds	r3, #52	; 0x34
 8004324:	460a      	mov	r2, r1
 8004326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d006      	beq.n	8004342 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	3301      	adds	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d9e9      	bls.n	8004314 <prvInitialiseNewTask+0x64>
 8004340:	e000      	b.n	8004344 <prvInitialiseNewTask+0x94>
			{
				break;
 8004342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800434c:	e003      	b.n	8004356 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	2b37      	cmp	r3, #55	; 0x37
 800435a:	d901      	bls.n	8004360 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800435c:	2337      	movs	r3, #55	; 0x37
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2200      	movs	r2, #0
 8004370:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff f978 	bl	800366c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	3318      	adds	r3, #24
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff f973 	bl	800366c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	2200      	movs	r2, #0
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	3358      	adds	r3, #88	; 0x58
 80043b6:	224c      	movs	r2, #76	; 0x4c
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fe16 	bl	8005fec <memset>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <prvInitialiseNewTask+0x148>)
 80043c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <prvInitialiseNewTask+0x14c>)
 80043ca:	661a      	str	r2, [r3, #96]	; 0x60
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <prvInitialiseNewTask+0x150>)
 80043d0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	68f9      	ldr	r1, [r7, #12]
 80043d6:	69b8      	ldr	r0, [r7, #24]
 80043d8:	f001 f9d2 	bl	8005780 <pxPortInitialiseStack>
 80043dc:	4602      	mov	r2, r0
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20004d6c 	.word	0x20004d6c
 80043fc:	20004dd4 	.word	0x20004dd4
 8004400:	20004e3c 	.word	0x20004e3c

08004404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800440c:	f001 fae2 	bl	80059d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <prvAddNewTaskToReadyList+0xc4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <prvAddNewTaskToReadyList+0xc4>)
 8004418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800441a:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <prvAddNewTaskToReadyList+0xc8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004422:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <prvAddNewTaskToReadyList+0xc8>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004428:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <prvAddNewTaskToReadyList+0xc4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d110      	bne.n	8004452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004430:	f000 fcb6 	bl	8004da0 <prvInitialiseTaskLists>
 8004434:	e00d      	b.n	8004452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004436:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <prvAddNewTaskToReadyList+0xcc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <prvAddNewTaskToReadyList+0xc8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	429a      	cmp	r2, r3
 800444a:	d802      	bhi.n	8004452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <prvAddNewTaskToReadyList+0xc8>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <prvAddNewTaskToReadyList+0xd0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <prvAddNewTaskToReadyList+0xd0>)
 800445a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <prvAddNewTaskToReadyList+0xd0>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <prvAddNewTaskToReadyList+0xd4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d903      	bls.n	8004478 <prvAddNewTaskToReadyList+0x74>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <prvAddNewTaskToReadyList+0xd4>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <prvAddNewTaskToReadyList+0xd8>)
 8004486:	441a      	add	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f7ff f8f9 	bl	8003686 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004494:	f001 face 	bl	8005a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <prvAddNewTaskToReadyList+0xcc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <prvAddNewTaskToReadyList+0xc8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d207      	bcs.n	80044be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <prvAddNewTaskToReadyList+0xdc>)
 80044b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000fe4 	.word	0x20000fe4
 80044cc:	20000b10 	.word	0x20000b10
 80044d0:	20000ff0 	.word	0x20000ff0
 80044d4:	20001000 	.word	0x20001000
 80044d8:	20000fec 	.word	0x20000fec
 80044dc:	20000b14 	.word	0x20000b14
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80044ec:	f001 fa72 	bl	80059d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d102      	bne.n	80044fc <vTaskDelete+0x18>
 80044f6:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <vTaskDelete+0xc4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	e000      	b.n	80044fe <vTaskDelete+0x1a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3304      	adds	r3, #4
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f91b 	bl	8003740 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3318      	adds	r3, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff f912 	bl	8003740 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800451c:	4b23      	ldr	r3, [pc, #140]	; (80045ac <vTaskDelete+0xc8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a22      	ldr	r2, [pc, #136]	; (80045ac <vTaskDelete+0xc8>)
 8004524:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <vTaskDelete+0xc4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d10b      	bne.n	8004548 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	481e      	ldr	r0, [pc, #120]	; (80045b0 <vTaskDelete+0xcc>)
 8004538:	f7ff f8a5 	bl	8003686 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <vTaskDelete+0xd0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <vTaskDelete+0xd0>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e009      	b.n	800455c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <vTaskDelete+0xd4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	4a1a      	ldr	r2, [pc, #104]	; (80045b8 <vTaskDelete+0xd4>)
 8004550:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fc92 	bl	8004e7c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004558:	f000 fcc4 	bl	8004ee4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800455c:	f001 fa6a 	bl	8005a34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <vTaskDelete+0xd8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01b      	beq.n	80045a0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <vTaskDelete+0xc4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	429a      	cmp	r2, r3
 8004570:	d116      	bne.n	80045a0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004572:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <vTaskDelete+0xdc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <vTaskDelete+0xac>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60bb      	str	r3, [r7, #8]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <vTaskDelete+0xe0>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000b10 	.word	0x20000b10
 80045ac:	20001000 	.word	0x20001000
 80045b0:	20000fb8 	.word	0x20000fb8
 80045b4:	20000fcc 	.word	0x20000fcc
 80045b8:	20000fe4 	.word	0x20000fe4
 80045bc:	20000ff0 	.word	0x20000ff0
 80045c0:	2000100c 	.word	0x2000100c
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <vTaskDelay+0x60>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <vTaskDelay+0x30>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60bb      	str	r3, [r7, #8]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045f8:	f000 f88c 	bl	8004714 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045fc:	2100      	movs	r1, #0
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fd1c 	bl	800503c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004604:	f000 f894 	bl	8004730 <xTaskResumeAll>
 8004608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <vTaskDelay+0x64>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000100c 	.word	0x2000100c
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800463e:	463a      	mov	r2, r7
 8004640:	1d39      	adds	r1, r7, #4
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe ffbc 	bl	80035c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	9202      	str	r2, [sp, #8]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	460a      	mov	r2, r1
 800465e:	4925      	ldr	r1, [pc, #148]	; (80046f4 <vTaskStartScheduler+0xc4>)
 8004660:	4825      	ldr	r0, [pc, #148]	; (80046f8 <vTaskStartScheduler+0xc8>)
 8004662:	f7ff fd83 	bl	800416c <xTaskCreateStatic>
 8004666:	4603      	mov	r3, r0
 8004668:	4a24      	ldr	r2, [pc, #144]	; (80046fc <vTaskStartScheduler+0xcc>)
 800466a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800466c:	4b23      	ldr	r3, [pc, #140]	; (80046fc <vTaskStartScheduler+0xcc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e001      	b.n	800467e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d102      	bne.n	800468a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004684:	f000 fd2e 	bl	80050e4 <xTimerCreateTimerTask>
 8004688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d11d      	bne.n	80046cc <vTaskStartScheduler+0x9c>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <vTaskStartScheduler+0xd0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3358      	adds	r3, #88	; 0x58
 80046aa:	4a16      	ldr	r2, [pc, #88]	; (8004704 <vTaskStartScheduler+0xd4>)
 80046ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <vTaskStartScheduler+0xd8>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <vTaskStartScheduler+0xdc>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <vTaskStartScheduler+0xe0>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80046c2:	f7fc fcc5 	bl	8001050 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046c6:	f001 f8e3 	bl	8005890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ca:	e00e      	b.n	80046ea <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d10a      	bne.n	80046ea <vTaskStartScheduler+0xba>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	60fb      	str	r3, [r7, #12]
}
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <vTaskStartScheduler+0xb8>
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	080061ec 	.word	0x080061ec
 80046f8:	08004d71 	.word	0x08004d71
 80046fc:	20001008 	.word	0x20001008
 8004700:	20000b10 	.word	0x20000b10
 8004704:	2000005c 	.word	0x2000005c
 8004708:	20001004 	.word	0x20001004
 800470c:	20000ff0 	.word	0x20000ff0
 8004710:	20000fe8 	.word	0x20000fe8

08004714 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <vTaskSuspendAll+0x18>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3301      	adds	r3, #1
 800471e:	4a03      	ldr	r2, [pc, #12]	; (800472c <vTaskSuspendAll+0x18>)
 8004720:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004722:	bf00      	nop
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	2000100c 	.word	0x2000100c

08004730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800473e:	4b42      	ldr	r3, [pc, #264]	; (8004848 <xTaskResumeAll+0x118>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <xTaskResumeAll+0x2c>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	603b      	str	r3, [r7, #0]
}
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800475c:	f001 f93a 	bl	80059d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004760:	4b39      	ldr	r3, [pc, #228]	; (8004848 <xTaskResumeAll+0x118>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3b01      	subs	r3, #1
 8004766:	4a38      	ldr	r2, [pc, #224]	; (8004848 <xTaskResumeAll+0x118>)
 8004768:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <xTaskResumeAll+0x118>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d162      	bne.n	8004838 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <xTaskResumeAll+0x11c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d05e      	beq.n	8004838 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800477a:	e02f      	b.n	80047dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <xTaskResumeAll+0x120>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3318      	adds	r3, #24
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe ffd9 	bl	8003740 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3304      	adds	r3, #4
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe ffd4 	bl	8003740 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <xTaskResumeAll+0x124>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d903      	bls.n	80047ac <xTaskResumeAll+0x7c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <xTaskResumeAll+0x124>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4a27      	ldr	r2, [pc, #156]	; (8004858 <xTaskResumeAll+0x128>)
 80047ba:	441a      	add	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f7fe ff5f 	bl	8003686 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047cc:	4b23      	ldr	r3, [pc, #140]	; (800485c <xTaskResumeAll+0x12c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <xTaskResumeAll+0x130>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047dc:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <xTaskResumeAll+0x120>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1cb      	bne.n	800477c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047ea:	f000 fb7b 	bl	8004ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047ee:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <xTaskResumeAll+0x134>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047fa:	f000 f847 	bl	800488c <xTaskIncrementTick>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004804:	4b16      	ldr	r3, [pc, #88]	; (8004860 <xTaskResumeAll+0x130>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3b01      	subs	r3, #1
 800480e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f1      	bne.n	80047fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <xTaskResumeAll+0x134>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800481c:	4b10      	ldr	r3, [pc, #64]	; (8004860 <xTaskResumeAll+0x130>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <xTaskResumeAll+0x138>)
 800482a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004838:	f001 f8fc 	bl	8005a34 <vPortExitCritical>

	return xAlreadyYielded;
 800483c:	68bb      	ldr	r3, [r7, #8]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2000100c 	.word	0x2000100c
 800484c:	20000fe4 	.word	0x20000fe4
 8004850:	20000fa4 	.word	0x20000fa4
 8004854:	20000fec 	.word	0x20000fec
 8004858:	20000b14 	.word	0x20000b14
 800485c:	20000b10 	.word	0x20000b10
 8004860:	20000ff8 	.word	0x20000ff8
 8004864:	20000ff4 	.word	0x20000ff4
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <xTaskGetTickCount+0x1c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004878:	687b      	ldr	r3, [r7, #4]
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000fe8 	.word	0x20000fe8

0800488c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004896:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <xTaskIncrementTick+0x148>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 808f 	bne.w	80049be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048a0:	4b4d      	ldr	r3, [pc, #308]	; (80049d8 <xTaskIncrementTick+0x14c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048a8:	4a4b      	ldr	r2, [pc, #300]	; (80049d8 <xTaskIncrementTick+0x14c>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d120      	bne.n	80048f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048b4:	4b49      	ldr	r3, [pc, #292]	; (80049dc <xTaskIncrementTick+0x150>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	603b      	str	r3, [r7, #0]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xTaskIncrementTick+0x46>
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <xTaskIncrementTick+0x150>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <xTaskIncrementTick+0x154>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3f      	ldr	r2, [pc, #252]	; (80049dc <xTaskIncrementTick+0x150>)
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4a3f      	ldr	r2, [pc, #252]	; (80049e0 <xTaskIncrementTick+0x154>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <xTaskIncrementTick+0x158>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3301      	adds	r3, #1
 80048ee:	4a3d      	ldr	r2, [pc, #244]	; (80049e4 <xTaskIncrementTick+0x158>)
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	f000 faf7 	bl	8004ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048f6:	4b3c      	ldr	r3, [pc, #240]	; (80049e8 <xTaskIncrementTick+0x15c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d349      	bcc.n	8004994 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <xTaskIncrementTick+0x150>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <xTaskIncrementTick+0x15c>)
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	601a      	str	r2, [r3, #0]
					break;
 8004912:	e03f      	b.n	8004994 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <xTaskIncrementTick+0x150>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d203      	bcs.n	8004934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800492c:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <xTaskIncrementTick+0x15c>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004932:	e02f      	b.n	8004994 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe ff01 	bl	8003740 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3318      	adds	r3, #24
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fef8 	bl	8003740 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <xTaskIncrementTick+0x160>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d903      	bls.n	8004964 <xTaskIncrementTick+0xd8>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <xTaskIncrementTick+0x160>)
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <xTaskIncrementTick+0x164>)
 8004972:	441a      	add	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7fe fe83 	bl	8003686 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <xTaskIncrementTick+0x168>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	429a      	cmp	r2, r3
 800498c:	d3b8      	bcc.n	8004900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800498e:	2301      	movs	r3, #1
 8004990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004992:	e7b5      	b.n	8004900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <xTaskIncrementTick+0x168>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499a:	4915      	ldr	r1, [pc, #84]	; (80049f0 <xTaskIncrementTick+0x164>)
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d901      	bls.n	80049b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <xTaskIncrementTick+0x16c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e004      	b.n	80049c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <xTaskIncrementTick+0x170>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <xTaskIncrementTick+0x170>)
 80049c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049c8:	697b      	ldr	r3, [r7, #20]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	2000100c 	.word	0x2000100c
 80049d8:	20000fe8 	.word	0x20000fe8
 80049dc:	20000f9c 	.word	0x20000f9c
 80049e0:	20000fa0 	.word	0x20000fa0
 80049e4:	20000ffc 	.word	0x20000ffc
 80049e8:	20001004 	.word	0x20001004
 80049ec:	20000fec 	.word	0x20000fec
 80049f0:	20000b14 	.word	0x20000b14
 80049f4:	20000b10 	.word	0x20000b10
 80049f8:	20000ff8 	.word	0x20000ff8
 80049fc:	20000ff4 	.word	0x20000ff4

08004a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <vTaskSwitchContext+0xe0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a0e:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <vTaskSwitchContext+0xe4>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a14:	e05f      	b.n	8004ad6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8004a16:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <vTaskSwitchContext+0xe4>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004a1c:	f7fc fb26 	bl	800106c <getRunTimeCounterValue>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a31      	ldr	r2, [pc, #196]	; (8004ae8 <vTaskSwitchContext+0xe8>)
 8004a24:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <vTaskSwitchContext+0xe8>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b30      	ldr	r3, [pc, #192]	; (8004aec <vTaskSwitchContext+0xec>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d909      	bls.n	8004a46 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004a32:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <vTaskSwitchContext+0xf0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a38:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <vTaskSwitchContext+0xe8>)
 8004a3a:	6810      	ldr	r0, [r2, #0]
 8004a3c:	4a2b      	ldr	r2, [pc, #172]	; (8004aec <vTaskSwitchContext+0xec>)
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	1a82      	subs	r2, r0, r2
 8004a42:	440a      	add	r2, r1
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004a46:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <vTaskSwitchContext+0xe8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a28      	ldr	r2, [pc, #160]	; (8004aec <vTaskSwitchContext+0xec>)
 8004a4c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <vTaskSwitchContext+0xf4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e010      	b.n	8004a78 <vTaskSwitchContext+0x78>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <vTaskSwitchContext+0x72>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	607b      	str	r3, [r7, #4]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <vTaskSwitchContext+0x70>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	491f      	ldr	r1, [pc, #124]	; (8004af8 <vTaskSwitchContext+0xf8>)
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0e4      	beq.n	8004a56 <vTaskSwitchContext+0x56>
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <vTaskSwitchContext+0xf8>)
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3308      	adds	r3, #8
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d104      	bne.n	8004abc <vTaskSwitchContext+0xbc>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4a0b      	ldr	r2, [pc, #44]	; (8004af0 <vTaskSwitchContext+0xf0>)
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <vTaskSwitchContext+0xf4>)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004acc:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <vTaskSwitchContext+0xf0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3358      	adds	r3, #88	; 0x58
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <vTaskSwitchContext+0xfc>)
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	2000100c 	.word	0x2000100c
 8004ae4:	20000ff8 	.word	0x20000ff8
 8004ae8:	20001014 	.word	0x20001014
 8004aec:	20001010 	.word	0x20001010
 8004af0:	20000b10 	.word	0x20000b10
 8004af4:	20000fec 	.word	0x20000fec
 8004af8:	20000b14 	.word	0x20000b14
 8004afc:	2000005c 	.word	0x2000005c

08004b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60fb      	str	r3, [r7, #12]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <vTaskPlaceOnEventList+0x44>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fe fdcd 	bl	80036ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b34:	2101      	movs	r1, #1
 8004b36:	6838      	ldr	r0, [r7, #0]
 8004b38:	f000 fa80 	bl	800503c <prvAddCurrentTaskToDelayedList>
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000b10 	.word	0x20000b10

08004b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	617b      	str	r3, [r7, #20]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3318      	adds	r3, #24
 8004b76:	4619      	mov	r1, r3
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7fe fd84 	bl	8003686 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b84:	f04f 33ff 	mov.w	r3, #4294967295
 8004b88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	68b8      	ldr	r0, [r7, #8]
 8004b8e:	f000 fa55 	bl	800503c <prvAddCurrentTaskToDelayedList>
	}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000b10 	.word	0x20000b10

08004ba0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60fb      	str	r3, [r7, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	3318      	adds	r3, #24
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fdb5 	bl	8003740 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <xTaskRemoveFromEventList+0xb0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d11d      	bne.n	8004c1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fdac 	bl	8003740 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <xTaskRemoveFromEventList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d903      	bls.n	8004bfc <xTaskRemoveFromEventList+0x5c>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <xTaskRemoveFromEventList+0xb4>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <xTaskRemoveFromEventList+0xb8>)
 8004c0a:	441a      	add	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7fe fd37 	bl	8003686 <vListInsertEnd>
 8004c18:	e005      	b.n	8004c26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	4619      	mov	r1, r3
 8004c20:	480e      	ldr	r0, [pc, #56]	; (8004c5c <xTaskRemoveFromEventList+0xbc>)
 8004c22:	f7fe fd30 	bl	8003686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <xTaskRemoveFromEventList+0xc0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d905      	bls.n	8004c40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <xTaskRemoveFromEventList+0xc4>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e001      	b.n	8004c44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c44:	697b      	ldr	r3, [r7, #20]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	2000100c 	.word	0x2000100c
 8004c54:	20000fec 	.word	0x20000fec
 8004c58:	20000b14 	.word	0x20000b14
 8004c5c:	20000fa4 	.word	0x20000fa4
 8004c60:	20000b10 	.word	0x20000b10
 8004c64:	20000ff8 	.word	0x20000ff8

08004c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <vTaskInternalSetTimeOutState+0x24>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <vTaskInternalSetTimeOutState+0x28>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	605a      	str	r2, [r3, #4]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20000ffc 	.word	0x20000ffc
 8004c90:	20000fe8 	.word	0x20000fe8

08004c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	613b      	str	r3, [r7, #16]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004cd6:	f000 fe7d 	bl	80059d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cda:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <xTaskCheckForTimeOut+0xbc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d102      	bne.n	8004cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e023      	b.n	8004d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <xTaskCheckForTimeOut+0xc0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d007      	beq.n	8004d16 <xTaskCheckForTimeOut+0x82>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	e015      	b.n	8004d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d20b      	bcs.n	8004d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	1ad2      	subs	r2, r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff9b 	bl	8004c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e004      	b.n	8004d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f000 fe77 	bl	8005a34 <vPortExitCritical>

	return xReturn;
 8004d46:	69fb      	ldr	r3, [r7, #28]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000fe8 	.word	0x20000fe8
 8004d54:	20000ffc 	.word	0x20000ffc

08004d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <vTaskMissedYield+0x14>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	20000ff8 	.word	0x20000ff8

08004d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d78:	f000 f852 	bl	8004e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d7c:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <prvIdleTask+0x28>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d9f9      	bls.n	8004d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <prvIdleTask+0x2c>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d94:	e7f0      	b.n	8004d78 <prvIdleTask+0x8>
 8004d96:	bf00      	nop
 8004d98:	20000b14 	.word	0x20000b14
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	e00c      	b.n	8004dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <prvInitialiseTaskLists+0x60>)
 8004db8:	4413      	add	r3, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fc36 	bl	800362c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b37      	cmp	r3, #55	; 0x37
 8004dca:	d9ef      	bls.n	8004dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dcc:	480d      	ldr	r0, [pc, #52]	; (8004e04 <prvInitialiseTaskLists+0x64>)
 8004dce:	f7fe fc2d 	bl	800362c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004dd2:	480d      	ldr	r0, [pc, #52]	; (8004e08 <prvInitialiseTaskLists+0x68>)
 8004dd4:	f7fe fc2a 	bl	800362c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dd8:	480c      	ldr	r0, [pc, #48]	; (8004e0c <prvInitialiseTaskLists+0x6c>)
 8004dda:	f7fe fc27 	bl	800362c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dde:	480c      	ldr	r0, [pc, #48]	; (8004e10 <prvInitialiseTaskLists+0x70>)
 8004de0:	f7fe fc24 	bl	800362c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004de4:	480b      	ldr	r0, [pc, #44]	; (8004e14 <prvInitialiseTaskLists+0x74>)
 8004de6:	f7fe fc21 	bl	800362c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <prvInitialiseTaskLists+0x78>)
 8004dec:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <prvInitialiseTaskLists+0x64>)
 8004dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvInitialiseTaskLists+0x7c>)
 8004df2:	4a05      	ldr	r2, [pc, #20]	; (8004e08 <prvInitialiseTaskLists+0x68>)
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000b14 	.word	0x20000b14
 8004e04:	20000f74 	.word	0x20000f74
 8004e08:	20000f88 	.word	0x20000f88
 8004e0c:	20000fa4 	.word	0x20000fa4
 8004e10:	20000fb8 	.word	0x20000fb8
 8004e14:	20000fd0 	.word	0x20000fd0
 8004e18:	20000f9c 	.word	0x20000f9c
 8004e1c:	20000fa0 	.word	0x20000fa0

08004e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e26:	e019      	b.n	8004e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e28:	f000 fdd4 	bl	80059d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <prvCheckTasksWaitingTermination+0x50>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe fc81 	bl	8003740 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <prvCheckTasksWaitingTermination+0x54>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <prvCheckTasksWaitingTermination+0x54>)
 8004e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <prvCheckTasksWaitingTermination+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <prvCheckTasksWaitingTermination+0x58>)
 8004e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e52:	f000 fdef 	bl	8005a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f810 	bl	8004e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <prvCheckTasksWaitingTermination+0x58>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e1      	bne.n	8004e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000fb8 	.word	0x20000fb8
 8004e74:	20000fe4 	.word	0x20000fe4
 8004e78:	20000fcc 	.word	0x20000fcc

08004e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3358      	adds	r3, #88	; 0x58
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 f8b7 	bl	8005ffc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 ff87 	bl	8005db0 <vPortFree>
				vPortFree( pxTCB );
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 ff84 	bl	8005db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ea8:	e018      	b.n	8004edc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d103      	bne.n	8004ebc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 ff7b 	bl	8005db0 <vPortFree>
	}
 8004eba:	e00f      	b.n	8004edc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d00a      	beq.n	8004edc <prvDeleteTCB+0x60>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60fb      	str	r3, [r7, #12]
}
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <prvDeleteTCB+0x5e>
	}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <prvResetNextTaskUnblockTime+0x38>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <prvResetNextTaskUnblockTime+0x3c>)
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004efc:	e008      	b.n	8004f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <prvResetNextTaskUnblockTime+0x38>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <prvResetNextTaskUnblockTime+0x3c>)
 8004f0e:	6013      	str	r3, [r2, #0]
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	20000f9c 	.word	0x20000f9c
 8004f20:	20001004 	.word	0x20001004

08004f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <xTaskGetSchedulerState+0x34>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d102      	bne.n	8004f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f32:	2301      	movs	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	e008      	b.n	8004f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <xTaskGetSchedulerState+0x38>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f40:	2302      	movs	r3, #2
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	e001      	b.n	8004f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f4a:	687b      	ldr	r3, [r7, #4]
	}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	20000ff0 	.word	0x20000ff0
 8004f5c:	2000100c 	.word	0x2000100c

08004f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d056      	beq.n	8005024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <xTaskPriorityDisinherit+0xd0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d00a      	beq.n	8004f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60bb      	str	r3, [r7, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	1e5a      	subs	r2, r3, #1
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d02c      	beq.n	8005024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d128      	bne.n	8005024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe fbb2 	bl	8003740 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <xTaskPriorityDisinherit+0xd4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d903      	bls.n	8005004 <xTaskPriorityDisinherit+0xa4>
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <xTaskPriorityDisinherit+0xd4>)
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <xTaskPriorityDisinherit+0xd8>)
 8005012:	441a      	add	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7fe fb33 	bl	8003686 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005024:	697b      	ldr	r3, [r7, #20]
	}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000b10 	.word	0x20000b10
 8005034:	20000fec 	.word	0x20000fec
 8005038:	20000b14 	.word	0x20000b14

0800503c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005046:	4b21      	ldr	r3, [pc, #132]	; (80050cc <prvAddCurrentTaskToDelayedList+0x90>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fb74 	bl	8003740 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d10a      	bne.n	8005076 <prvAddCurrentTaskToDelayedList+0x3a>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4819      	ldr	r0, [pc, #100]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005070:	f7fe fb09 	bl	8003686 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005074:	e026      	b.n	80050c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	429a      	cmp	r2, r3
 800508c:	d209      	bcs.n	80050a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f7fe fb17 	bl	80036ce <vListInsert>
}
 80050a0:	e010      	b.n	80050c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe fb0d 	bl	80036ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d202      	bcs.n	80050c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000fe8 	.word	0x20000fe8
 80050d0:	20000b10 	.word	0x20000b10
 80050d4:	20000fd0 	.word	0x20000fd0
 80050d8:	20000fa0 	.word	0x20000fa0
 80050dc:	20000f9c 	.word	0x20000f9c
 80050e0:	20001004 	.word	0x20001004

080050e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050ee:	f000 fb07 	bl	8005700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <xTimerCreateTimerTask+0x80>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d021      	beq.n	800513e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005102:	1d3a      	adds	r2, r7, #4
 8005104:	f107 0108 	add.w	r1, r7, #8
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe fa73 	bl	80035f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	2302      	movs	r3, #2
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	460a      	mov	r2, r1
 8005124:	4910      	ldr	r1, [pc, #64]	; (8005168 <xTimerCreateTimerTask+0x84>)
 8005126:	4811      	ldr	r0, [pc, #68]	; (800516c <xTimerCreateTimerTask+0x88>)
 8005128:	f7ff f820 	bl	800416c <xTaskCreateStatic>
 800512c:	4603      	mov	r3, r0
 800512e:	4a10      	ldr	r2, [pc, #64]	; (8005170 <xTimerCreateTimerTask+0x8c>)
 8005130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <xTimerCreateTimerTask+0x8c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800513a:	2301      	movs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	613b      	str	r3, [r7, #16]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800515a:	697b      	ldr	r3, [r7, #20]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20001048 	.word	0x20001048
 8005168:	0800621c 	.word	0x0800621c
 800516c:	080052a9 	.word	0x080052a9
 8005170:	2000104c 	.word	0x2000104c

08005174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	623b      	str	r3, [r7, #32]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <xTimerGenericCommand+0x98>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02a      	beq.n	8005200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	dc18      	bgt.n	80051ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051bc:	f7ff feb2 	bl	8004f24 <xTaskGetSchedulerState>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d109      	bne.n	80051da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051c6:	4b11      	ldr	r3, [pc, #68]	; (800520c <xTimerGenericCommand+0x98>)
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f107 0110 	add.w	r1, r7, #16
 80051ce:	2300      	movs	r3, #0
 80051d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d2:	f7fe fbe3 	bl	800399c <xQueueGenericSend>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24
 80051d8:	e012      	b.n	8005200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051da:	4b0c      	ldr	r3, [pc, #48]	; (800520c <xTimerGenericCommand+0x98>)
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	f107 0110 	add.w	r1, r7, #16
 80051e2:	2300      	movs	r3, #0
 80051e4:	2200      	movs	r2, #0
 80051e6:	f7fe fbd9 	bl	800399c <xQueueGenericSend>
 80051ea:	6278      	str	r0, [r7, #36]	; 0x24
 80051ec:	e008      	b.n	8005200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <xTimerGenericCommand+0x98>)
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	f107 0110 	add.w	r1, r7, #16
 80051f6:	2300      	movs	r3, #0
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	f7fe fccd 	bl	8003b98 <xQueueGenericSendFromISR>
 80051fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005202:	4618      	mov	r0, r3
 8005204:	3728      	adds	r7, #40	; 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20001048 	.word	0x20001048

08005210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af02      	add	r7, sp, #8
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <prvProcessExpiredTimer+0x94>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3304      	adds	r3, #4
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe fa89 	bl	8003740 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d022      	beq.n	8005282 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	18d1      	adds	r1, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	6978      	ldr	r0, [r7, #20]
 800524a:	f000 f8d1 	bl	80053f0 <prvInsertTimerInActiveList>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	2300      	movs	r3, #0
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	2100      	movs	r1, #0
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f7ff ff88 	bl	8005174 <xTimerGenericCommand>
 8005264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d113      	bne.n	8005294 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	b2da      	uxtb	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	4798      	blx	r3
}
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20001040 	.word	0x20001040

080052a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052b0:	f107 0308 	add.w	r3, r7, #8
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f857 	bl	8005368 <prvGetNextExpireTime>
 80052ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4619      	mov	r1, r3
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f803 	bl	80052cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052c6:	f000 f8d5 	bl	8005474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ca:	e7f1      	b.n	80052b0 <prvTimerTask+0x8>

080052cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052d6:	f7ff fa1d 	bl	8004714 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f866 	bl	80053b0 <prvSampleTimeNow>
 80052e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d130      	bne.n	800534e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <prvProcessTimerOrBlockTask+0x3c>
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d806      	bhi.n	8005308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052fa:	f7ff fa19 	bl	8004730 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff85 	bl	8005210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005306:	e024      	b.n	8005352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <prvProcessTimerOrBlockTask+0x90>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <prvProcessTimerOrBlockTask+0x50>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <prvProcessTimerOrBlockTask+0x52>
 800531c:	2300      	movs	r3, #0
 800531e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <prvProcessTimerOrBlockTask+0x94>)
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	4619      	mov	r1, r3
 800532e:	f7fe fee9 	bl	8004104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005332:	f7ff f9fd 	bl	8004730 <xTaskResumeAll>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <prvProcessTimerOrBlockTask+0x98>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	f3bf 8f6f 	isb	sy
}
 800534c:	e001      	b.n	8005352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800534e:	f7ff f9ef 	bl	8004730 <xTaskResumeAll>
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20001044 	.word	0x20001044
 8005360:	20001048 	.word	0x20001048
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005370:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <prvGetNextExpireTime+0x44>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <prvGetNextExpireTime+0x16>
 800537a:	2201      	movs	r2, #1
 800537c:	e000      	b.n	8005380 <prvGetNextExpireTime+0x18>
 800537e:	2200      	movs	r2, #0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <prvGetNextExpireTime+0x44>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	e001      	b.n	800539c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800539c:	68fb      	ldr	r3, [r7, #12]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20001040 	.word	0x20001040

080053b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053b8:	f7ff fa58 	bl	800486c <xTaskGetTickCount>
 80053bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <prvSampleTimeNow+0x3c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d205      	bcs.n	80053d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053c8:	f000 f936 	bl	8005638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e002      	b.n	80053da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053da:	4a04      	ldr	r2, [pc, #16]	; (80053ec <prvSampleTimeNow+0x3c>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053e0:	68fb      	ldr	r3, [r7, #12]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20001050 	.word	0x20001050

080053f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d812      	bhi.n	800543c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e01b      	b.n	8005462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800542a:	4b10      	ldr	r3, [pc, #64]	; (800546c <prvInsertTimerInActiveList+0x7c>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7fe f94a 	bl	80036ce <vListInsert>
 800543a:	e012      	b.n	8005462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d206      	bcs.n	8005452 <prvInsertTimerInActiveList+0x62>
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e007      	b.n	8005462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <prvInsertTimerInActiveList+0x80>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f7fe f936 	bl	80036ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005462:	697b      	ldr	r3, [r7, #20]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20001044 	.word	0x20001044
 8005470:	20001040 	.word	0x20001040

08005474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08e      	sub	sp, #56	; 0x38
 8005478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800547a:	e0ca      	b.n	8005612 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	da18      	bge.n	80054b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	3304      	adds	r3, #4
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	61fb      	str	r3, [r7, #28]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054aa:	6850      	ldr	r0, [r2, #4]
 80054ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ae:	6892      	ldr	r2, [r2, #8]
 80054b0:	4611      	mov	r1, r2
 80054b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f2c0 80ab 	blt.w	8005612 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	3304      	adds	r3, #4
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe f937 	bl	8003740 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d2:	463b      	mov	r3, r7
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff ff6b 	bl	80053b0 <prvSampleTimeNow>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b09      	cmp	r3, #9
 80054e0:	f200 8096 	bhi.w	8005610 <prvProcessReceivedCommands+0x19c>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <prvProcessReceivedCommands+0x78>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005515 	.word	0x08005515
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005515 	.word	0x08005515
 80054f8:	08005589 	.word	0x08005589
 80054fc:	0800559d 	.word	0x0800559d
 8005500:	080055e7 	.word	0x080055e7
 8005504:	08005515 	.word	0x08005515
 8005508:	08005515 	.word	0x08005515
 800550c:	08005589 	.word	0x08005589
 8005510:	0800559d 	.word	0x0800559d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	b2da      	uxtb	r2, r3
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	18d1      	adds	r1, r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005534:	f7ff ff5c 	bl	80053f0 <prvInsertTimerInActiveList>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d069      	beq.n	8005612 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05e      	beq.n	8005612 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	441a      	add	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	2100      	movs	r1, #0
 8005564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005566:	f7ff fe05 	bl	8005174 <xTimerGenericCommand>
 800556a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d14f      	bne.n	8005612 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61bb      	str	r3, [r7, #24]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	b2da      	uxtb	r2, r3
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800559a:	e03a      	b.n	8005612 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	617b      	str	r3, [r7, #20]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	18d1      	adds	r1, r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e0:	f7ff ff06 	bl	80053f0 <prvInsertTimerInActiveList>
					break;
 80055e4:	e015      	b.n	8005612 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d103      	bne.n	80055fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f000 fbdb 	bl	8005db0 <vPortFree>
 80055fa:	e00a      	b.n	8005612 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800560e:	e000      	b.n	8005612 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <prvProcessReceivedCommands+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	1d39      	adds	r1, r7, #4
 8005618:	2200      	movs	r2, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fb58 	bl	8003cd0 <xQueueReceive>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f47f af2a 	bne.w	800547c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	3730      	adds	r7, #48	; 0x30
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20001048 	.word	0x20001048

08005638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800563e:	e048      	b.n	80056d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005640:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <prvSwitchTimerLists+0xc0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564a:	4b2b      	ldr	r3, [pc, #172]	; (80056f8 <prvSwitchTimerLists+0xc0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3304      	adds	r3, #4
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe f871 	bl	8003740 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02e      	beq.n	80056d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	d90e      	bls.n	80056a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005692:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <prvSwitchTimerLists+0xc0>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f7fe f816 	bl	80036ce <vListInsert>
 80056a2:	e016      	b.n	80056d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a4:	2300      	movs	r3, #0
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	2100      	movs	r1, #0
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff fd60 	bl	8005174 <xTimerGenericCommand>
 80056b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	603b      	str	r3, [r7, #0]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056d2:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <prvSwitchTimerLists+0xc0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1b1      	bne.n	8005640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <prvSwitchTimerLists+0xc0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <prvSwitchTimerLists+0xc4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <prvSwitchTimerLists+0xc0>)
 80056e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056ea:	4a04      	ldr	r2, [pc, #16]	; (80056fc <prvSwitchTimerLists+0xc4>)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	6013      	str	r3, [r2, #0]
}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20001040 	.word	0x20001040
 80056fc:	20001044 	.word	0x20001044

08005700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005706:	f000 f965 	bl	80059d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <prvCheckForValidListAndQueue+0x60>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d120      	bne.n	8005754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005712:	4814      	ldr	r0, [pc, #80]	; (8005764 <prvCheckForValidListAndQueue+0x64>)
 8005714:	f7fd ff8a 	bl	800362c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005718:	4813      	ldr	r0, [pc, #76]	; (8005768 <prvCheckForValidListAndQueue+0x68>)
 800571a:	f7fd ff87 	bl	800362c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <prvCheckForValidListAndQueue+0x6c>)
 8005720:	4a10      	ldr	r2, [pc, #64]	; (8005764 <prvCheckForValidListAndQueue+0x64>)
 8005722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <prvCheckForValidListAndQueue+0x70>)
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <prvCheckForValidListAndQueue+0x68>)
 8005728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800572a:	2300      	movs	r3, #0
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <prvCheckForValidListAndQueue+0x74>)
 8005730:	4a11      	ldr	r2, [pc, #68]	; (8005778 <prvCheckForValidListAndQueue+0x78>)
 8005732:	2110      	movs	r1, #16
 8005734:	200a      	movs	r0, #10
 8005736:	f7fe f895 	bl	8003864 <xQueueGenericCreateStatic>
 800573a:	4603      	mov	r3, r0
 800573c:	4a08      	ldr	r2, [pc, #32]	; (8005760 <prvCheckForValidListAndQueue+0x60>)
 800573e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <prvCheckForValidListAndQueue+0x60>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <prvCheckForValidListAndQueue+0x60>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	490b      	ldr	r1, [pc, #44]	; (800577c <prvCheckForValidListAndQueue+0x7c>)
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fcae 	bl	80040b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005754:	f000 f96e 	bl	8005a34 <vPortExitCritical>
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20001048 	.word	0x20001048
 8005764:	20001018 	.word	0x20001018
 8005768:	2000102c 	.word	0x2000102c
 800576c:	20001040 	.word	0x20001040
 8005770:	20001044 	.word	0x20001044
 8005774:	200010f4 	.word	0x200010f4
 8005778:	20001054 	.word	0x20001054
 800577c:	08006224 	.word	0x08006224

08005780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3b04      	subs	r3, #4
 8005790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3b04      	subs	r3, #4
 800579e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b04      	subs	r3, #4
 80057ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057b0:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <pxPortInitialiseStack+0x64>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3b14      	subs	r3, #20
 80057ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f06f 0202 	mvn.w	r2, #2
 80057ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3b20      	subs	r3, #32
 80057d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057d6:	68fb      	ldr	r3, [r7, #12]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	080057e9 	.word	0x080057e9

080057e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057f2:	4b12      	ldr	r3, [pc, #72]	; (800583c <prvTaskExitError+0x54>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d00a      	beq.n	8005812 <prvTaskExitError+0x2a>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <prvTaskExitError+0x28>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	60bb      	str	r3, [r7, #8]
}
 8005824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005826:	bf00      	nop
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0fc      	beq.n	8005828 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800582e:	bf00      	nop
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	2000000c 	.word	0x2000000c

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	4770      	bx	lr
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst2>:
 8005860:	20000b10 	.word	0x20000b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005868:	4808      	ldr	r0, [pc, #32]	; (800588c <prvPortStartFirstTask+0x24>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8814 	msr	CONTROL, r0
 800587a:	b662      	cpsie	i
 800587c:	b661      	cpsie	f
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	df00      	svc	0
 8005888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800588a:	bf00      	nop
 800588c:	e000ed08 	.word	0xe000ed08

08005890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005896:	4b46      	ldr	r3, [pc, #280]	; (80059b0 <xPortStartScheduler+0x120>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a46      	ldr	r2, [pc, #280]	; (80059b4 <xPortStartScheduler+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10a      	bne.n	80058b6 <xPortStartScheduler+0x26>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <xPortStartScheduler+0x120>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3f      	ldr	r2, [pc, #252]	; (80059b8 <xPortStartScheduler+0x128>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10a      	bne.n	80058d6 <xPortStartScheduler+0x46>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	60fb      	str	r3, [r7, #12]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <xPortStartScheduler+0x12c>)
 80058d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	22ff      	movs	r2, #255	; 0xff
 80058e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <xPortStartScheduler+0x130>)
 80058fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <xPortStartScheduler+0x134>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005904:	e009      	b.n	800591a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005906:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <xPortStartScheduler+0x134>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <xPortStartScheduler+0x134>)
 800590e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d0ef      	beq.n	8005906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005926:	4b27      	ldr	r3, [pc, #156]	; (80059c4 <xPortStartScheduler+0x134>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1c3 0307 	rsb	r3, r3, #7
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00a      	beq.n	8005948 <xPortStartScheduler+0xb8>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60bb      	str	r3, [r7, #8]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005948:	4b1e      	ldr	r3, [pc, #120]	; (80059c4 <xPortStartScheduler+0x134>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <xPortStartScheduler+0x134>)
 8005950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005952:	4b1c      	ldr	r3, [pc, #112]	; (80059c4 <xPortStartScheduler+0x134>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800595a:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <xPortStartScheduler+0x134>)
 800595c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005966:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <xPortStartScheduler+0x138>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <xPortStartScheduler+0x138>)
 800596c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <xPortStartScheduler+0x138>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a14      	ldr	r2, [pc, #80]	; (80059c8 <xPortStartScheduler+0x138>)
 8005978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800597c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800597e:	f000 f8dd 	bl	8005b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <xPortStartScheduler+0x13c>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005988:	f000 f8fc 	bl	8005b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <xPortStartScheduler+0x140>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0f      	ldr	r2, [pc, #60]	; (80059d0 <xPortStartScheduler+0x140>)
 8005992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005998:	f7ff ff66 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800599c:	f7ff f830 	bl	8004a00 <vTaskSwitchContext>
	prvTaskExitError();
 80059a0:	f7ff ff22 	bl	80057e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	e000ed00 	.word	0xe000ed00
 80059b4:	410fc271 	.word	0x410fc271
 80059b8:	410fc270 	.word	0x410fc270
 80059bc:	e000e400 	.word	0xe000e400
 80059c0:	20001144 	.word	0x20001144
 80059c4:	20001148 	.word	0x20001148
 80059c8:	e000ed20 	.word	0xe000ed20
 80059cc:	2000000c 	.word	0x2000000c
 80059d0:	e000ef34 	.word	0xe000ef34

080059d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	607b      	str	r3, [r7, #4]
}
 80059ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <vPortEnterCritical+0x58>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <vPortEnterCritical+0x58>)
 80059f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <vPortEnterCritical+0x58>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10f      	bne.n	8005a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <vPortEnterCritical+0x5c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	603b      	str	r3, [r7, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	e7fe      	b.n	8005a1e <vPortEnterCritical+0x4a>
	}
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	2000000c 	.word	0x2000000c
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <vPortExitCritical+0x50>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <vPortExitCritical+0x24>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	607b      	str	r3, [r7, #4]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <vPortExitCritical+0x50>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <vPortExitCritical+0x50>)
 8005a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <vPortExitCritical+0x50>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <vPortExitCritical+0x42>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f383 8811 	msr	BASEPRI, r3
}
 8005a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	2000000c 	.word	0x2000000c
	...

08005a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a90:	f3ef 8009 	mrs	r0, PSP
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <pxCurrentTCBConst>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f01e 0f10 	tst.w	lr, #16
 8005aa0:	bf08      	it	eq
 8005aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ab4:	f380 8811 	msr	BASEPRI, r0
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f7fe ff9e 	bl	8004a00 <vTaskSwitchContext>
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f380 8811 	msr	BASEPRI, r0
 8005acc:	bc09      	pop	{r0, r3}
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	6808      	ldr	r0, [r1, #0]
 8005ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad6:	f01e 0f10 	tst.w	lr, #16
 8005ada:	bf08      	it	eq
 8005adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ae0:	f380 8809 	msr	PSP, r0
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst>:
 8005af0:	20000b10 	.word	0x20000b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b12:	f7fe febb 	bl	800488c <xTaskIncrementTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <xPortSysTickHandler+0x40>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <vPortSetupTimerInterrupt+0x38>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <vPortSetupTimerInterrupt+0x3c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <vPortSetupTimerInterrupt+0x40>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <vPortSetupTimerInterrupt+0x44>)
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b5e:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	e000e010 	.word	0xe000e010
 8005b74:	e000e018 	.word	0xe000e018
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	10624dd3 	.word	0x10624dd3
 8005b80:	e000e014 	.word	0xe000e014

08005b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b94 <vPortEnableVFP+0x10>
 8005b88:	6801      	ldr	r1, [r0, #0]
 8005b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b8e:	6001      	str	r1, [r0, #0]
 8005b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b92:	bf00      	nop
 8005b94:	e000ed88 	.word	0xe000ed88

08005b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
 8005ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b0f      	cmp	r3, #15
 8005ba8:	d914      	bls.n	8005bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <vPortValidateInterruptPriority+0x70>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bb4:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <vPortValidateInterruptPriority+0x74>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	7afa      	ldrb	r2, [r7, #11]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d20a      	bcs.n	8005bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <vPortValidateInterruptPriority+0x78>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <vPortValidateInterruptPriority+0x7c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d90a      	bls.n	8005bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	603b      	str	r3, [r7, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <vPortValidateInterruptPriority+0x60>
	}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	e000e3f0 	.word	0xe000e3f0
 8005c0c:	20001144 	.word	0x20001144
 8005c10:	e000ed0c 	.word	0xe000ed0c
 8005c14:	20001148 	.word	0x20001148

08005c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c24:	f7fe fd76 	bl	8004714 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c28:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <pvPortMalloc+0x180>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c30:	f000 f920 	bl	8005e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c34:	4b59      	ldr	r3, [pc, #356]	; (8005d9c <pvPortMalloc+0x184>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f040 8093 	bne.w	8005d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01d      	beq.n	8005c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c48:	2208      	movs	r2, #8
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f023 0307 	bic.w	r3, r3, #7
 8005c60:	3308      	adds	r3, #8
 8005c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <pvPortMalloc+0x6c>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	617b      	str	r3, [r7, #20]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d06e      	beq.n	8005d68 <pvPortMalloc+0x150>
 8005c8a:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <pvPortMalloc+0x188>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d869      	bhi.n	8005d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c94:	4b43      	ldr	r3, [pc, #268]	; (8005da4 <pvPortMalloc+0x18c>)
 8005c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c98:	4b42      	ldr	r3, [pc, #264]	; (8005da4 <pvPortMalloc+0x18c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9e:	e004      	b.n	8005caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <pvPortMalloc+0xa4>
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f1      	bne.n	8005ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cbc:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <pvPortMalloc+0x180>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d050      	beq.n	8005d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2208      	movs	r2, #8
 8005ccc:	4413      	add	r3, r2
 8005cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d91f      	bls.n	8005d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <pvPortMalloc+0xf8>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	613b      	str	r3, [r7, #16]
}
 8005d0c:	bf00      	nop
 8005d0e:	e7fe      	b.n	8005d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	1ad2      	subs	r2, r2, r3
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d22:	69b8      	ldr	r0, [r7, #24]
 8005d24:	f000 f908 	bl	8005f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d28:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <pvPortMalloc+0x188>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <pvPortMalloc+0x188>)
 8005d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d36:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <pvPortMalloc+0x188>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <pvPortMalloc+0x190>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d203      	bcs.n	8005d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <pvPortMalloc+0x188>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <pvPortMalloc+0x190>)
 8005d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <pvPortMalloc+0x184>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	431a      	orrs	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <pvPortMalloc+0x194>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a11      	ldr	r2, [pc, #68]	; (8005dac <pvPortMalloc+0x194>)
 8005d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d68:	f7fe fce2 	bl	8004730 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <pvPortMalloc+0x174>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60fb      	str	r3, [r7, #12]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <pvPortMalloc+0x172>
	return pvReturn;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3728      	adds	r7, #40	; 0x28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20004d54 	.word	0x20004d54
 8005d9c:	20004d68 	.word	0x20004d68
 8005da0:	20004d58 	.word	0x20004d58
 8005da4:	20004d4c 	.word	0x20004d4c
 8005da8:	20004d5c 	.word	0x20004d5c
 8005dac:	20004d60 	.word	0x20004d60

08005db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d04d      	beq.n	8005e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	425b      	negs	r3, r3
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	4b24      	ldr	r3, [pc, #144]	; (8005e68 <vPortFree+0xb8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <vPortFree+0x44>
	__asm volatile
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	60fb      	str	r3, [r7, #12]
}
 8005df0:	bf00      	nop
 8005df2:	e7fe      	b.n	8005df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <vPortFree+0x62>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	60bb      	str	r3, [r7, #8]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <vPortFree+0xb8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01e      	beq.n	8005e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11a      	bne.n	8005e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <vPortFree+0xb8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e38:	f7fe fc6c 	bl	8004714 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <vPortFree+0xbc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	4a09      	ldr	r2, [pc, #36]	; (8005e6c <vPortFree+0xbc>)
 8005e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f000 f874 	bl	8005f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <vPortFree+0xc0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a06      	ldr	r2, [pc, #24]	; (8005e70 <vPortFree+0xc0>)
 8005e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e5a:	f7fe fc69 	bl	8004730 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e5e:	bf00      	nop
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20004d68 	.word	0x20004d68
 8005e6c:	20004d58 	.word	0x20004d58
 8005e70:	20004d64 	.word	0x20004d64

08005e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e80:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <prvHeapInit+0xac>)
 8005e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00c      	beq.n	8005ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3307      	adds	r3, #7
 8005e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <prvHeapInit+0xac>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005eac:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <prvHeapInit+0xb0>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005eb2:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <prvHeapInit+0xb0>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0307 	bic.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <prvHeapInit+0xb4>)
 8005ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <prvHeapInit+0xb4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2200      	movs	r2, #0
 8005edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <prvHeapInit+0xb4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <prvHeapInit+0xb4>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <prvHeapInit+0xb8>)
 8005f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <prvHeapInit+0xbc>)
 8005f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <prvHeapInit+0xc0>)
 8005f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	2000114c 	.word	0x2000114c
 8005f24:	20004d4c 	.word	0x20004d4c
 8005f28:	20004d54 	.word	0x20004d54
 8005f2c:	20004d5c 	.word	0x20004d5c
 8005f30:	20004d58 	.word	0x20004d58
 8005f34:	20004d68 	.word	0x20004d68

08005f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f40:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <prvInsertBlockIntoFreeList+0xac>)
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	e002      	b.n	8005f4c <prvInsertBlockIntoFreeList+0x14>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d8f7      	bhi.n	8005f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d108      	bne.n	8005f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	441a      	add	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	441a      	add	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d118      	bne.n	8005fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d00d      	beq.n	8005fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e008      	b.n	8005fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e003      	b.n	8005fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d002      	beq.n	8005fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20004d4c 	.word	0x20004d4c
 8005fe8:	20004d54 	.word	0x20004d54

08005fec <memset>:
 8005fec:	4402      	add	r2, r0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d100      	bne.n	8005ff6 <memset+0xa>
 8005ff4:	4770      	bx	lr
 8005ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ffa:	e7f9      	b.n	8005ff0 <memset+0x4>

08005ffc <_reclaim_reent>:
 8005ffc:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <_reclaim_reent+0xa8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4283      	cmp	r3, r0
 8006002:	b570      	push	{r4, r5, r6, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	d04b      	beq.n	80060a0 <_reclaim_reent+0xa4>
 8006008:	69c3      	ldr	r3, [r0, #28]
 800600a:	b143      	cbz	r3, 800601e <_reclaim_reent+0x22>
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d144      	bne.n	800609c <_reclaim_reent+0xa0>
 8006012:	69e3      	ldr	r3, [r4, #28]
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	b111      	cbz	r1, 800601e <_reclaim_reent+0x22>
 8006018:	4620      	mov	r0, r4
 800601a:	f000 f879 	bl	8006110 <_free_r>
 800601e:	6961      	ldr	r1, [r4, #20]
 8006020:	b111      	cbz	r1, 8006028 <_reclaim_reent+0x2c>
 8006022:	4620      	mov	r0, r4
 8006024:	f000 f874 	bl	8006110 <_free_r>
 8006028:	69e1      	ldr	r1, [r4, #28]
 800602a:	b111      	cbz	r1, 8006032 <_reclaim_reent+0x36>
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f86f 	bl	8006110 <_free_r>
 8006032:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006034:	b111      	cbz	r1, 800603c <_reclaim_reent+0x40>
 8006036:	4620      	mov	r0, r4
 8006038:	f000 f86a 	bl	8006110 <_free_r>
 800603c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603e:	b111      	cbz	r1, 8006046 <_reclaim_reent+0x4a>
 8006040:	4620      	mov	r0, r4
 8006042:	f000 f865 	bl	8006110 <_free_r>
 8006046:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006048:	b111      	cbz	r1, 8006050 <_reclaim_reent+0x54>
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f860 	bl	8006110 <_free_r>
 8006050:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006052:	b111      	cbz	r1, 800605a <_reclaim_reent+0x5e>
 8006054:	4620      	mov	r0, r4
 8006056:	f000 f85b 	bl	8006110 <_free_r>
 800605a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800605c:	b111      	cbz	r1, 8006064 <_reclaim_reent+0x68>
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f856 	bl	8006110 <_free_r>
 8006064:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006066:	b111      	cbz	r1, 800606e <_reclaim_reent+0x72>
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f851 	bl	8006110 <_free_r>
 800606e:	6a23      	ldr	r3, [r4, #32]
 8006070:	b1b3      	cbz	r3, 80060a0 <_reclaim_reent+0xa4>
 8006072:	4620      	mov	r0, r4
 8006074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006078:	4718      	bx	r3
 800607a:	5949      	ldr	r1, [r1, r5]
 800607c:	b941      	cbnz	r1, 8006090 <_reclaim_reent+0x94>
 800607e:	3504      	adds	r5, #4
 8006080:	69e3      	ldr	r3, [r4, #28]
 8006082:	2d80      	cmp	r5, #128	; 0x80
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	d1f8      	bne.n	800607a <_reclaim_reent+0x7e>
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f841 	bl	8006110 <_free_r>
 800608e:	e7c0      	b.n	8006012 <_reclaim_reent+0x16>
 8006090:	680e      	ldr	r6, [r1, #0]
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f83c 	bl	8006110 <_free_r>
 8006098:	4631      	mov	r1, r6
 800609a:	e7ef      	b.n	800607c <_reclaim_reent+0x80>
 800609c:	2500      	movs	r5, #0
 800609e:	e7ef      	b.n	8006080 <_reclaim_reent+0x84>
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	bf00      	nop
 80060a4:	2000005c 	.word	0x2000005c

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4d0d      	ldr	r5, [pc, #52]	; (80060e0 <__libc_init_array+0x38>)
 80060ac:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060ae:	1b64      	subs	r4, r4, r5
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	2600      	movs	r6, #0
 80060b4:	42a6      	cmp	r6, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	4d0b      	ldr	r5, [pc, #44]	; (80060e8 <__libc_init_array+0x40>)
 80060ba:	4c0c      	ldr	r4, [pc, #48]	; (80060ec <__libc_init_array+0x44>)
 80060bc:	f000 f880 	bl	80061c0 <_init>
 80060c0:	1b64      	subs	r4, r4, r5
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	2600      	movs	r6, #0
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d0:	4798      	blx	r3
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060da:	4798      	blx	r3
 80060dc:	3601      	adds	r6, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	0800628c 	.word	0x0800628c
 80060e4:	0800628c 	.word	0x0800628c
 80060e8:	0800628c 	.word	0x0800628c
 80060ec:	08006290 	.word	0x08006290

080060f0 <__retarget_lock_acquire_recursive>:
 80060f0:	4770      	bx	lr

080060f2 <__retarget_lock_release_recursive>:
 80060f2:	4770      	bx	lr

080060f4 <memcpy>:
 80060f4:	440a      	add	r2, r1
 80060f6:	4291      	cmp	r1, r2
 80060f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060fc:	d100      	bne.n	8006100 <memcpy+0xc>
 80060fe:	4770      	bx	lr
 8006100:	b510      	push	{r4, lr}
 8006102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800610a:	4291      	cmp	r1, r2
 800610c:	d1f9      	bne.n	8006102 <memcpy+0xe>
 800610e:	bd10      	pop	{r4, pc}

08006110 <_free_r>:
 8006110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006112:	2900      	cmp	r1, #0
 8006114:	d044      	beq.n	80061a0 <_free_r+0x90>
 8006116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800611a:	9001      	str	r0, [sp, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f1a1 0404 	sub.w	r4, r1, #4
 8006122:	bfb8      	it	lt
 8006124:	18e4      	addlt	r4, r4, r3
 8006126:	f000 f83f 	bl	80061a8 <__malloc_lock>
 800612a:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <_free_r+0x94>)
 800612c:	9801      	ldr	r0, [sp, #4]
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	b933      	cbnz	r3, 8006140 <_free_r+0x30>
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	6014      	str	r4, [r2, #0]
 8006136:	b003      	add	sp, #12
 8006138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800613c:	f000 b83a 	b.w	80061b4 <__malloc_unlock>
 8006140:	42a3      	cmp	r3, r4
 8006142:	d908      	bls.n	8006156 <_free_r+0x46>
 8006144:	6825      	ldr	r5, [r4, #0]
 8006146:	1961      	adds	r1, r4, r5
 8006148:	428b      	cmp	r3, r1
 800614a:	bf01      	itttt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	1949      	addeq	r1, r1, r5
 8006152:	6021      	streq	r1, [r4, #0]
 8006154:	e7ed      	b.n	8006132 <_free_r+0x22>
 8006156:	461a      	mov	r2, r3
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	b10b      	cbz	r3, 8006160 <_free_r+0x50>
 800615c:	42a3      	cmp	r3, r4
 800615e:	d9fa      	bls.n	8006156 <_free_r+0x46>
 8006160:	6811      	ldr	r1, [r2, #0]
 8006162:	1855      	adds	r5, r2, r1
 8006164:	42a5      	cmp	r5, r4
 8006166:	d10b      	bne.n	8006180 <_free_r+0x70>
 8006168:	6824      	ldr	r4, [r4, #0]
 800616a:	4421      	add	r1, r4
 800616c:	1854      	adds	r4, r2, r1
 800616e:	42a3      	cmp	r3, r4
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	d1e0      	bne.n	8006136 <_free_r+0x26>
 8006174:	681c      	ldr	r4, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	6053      	str	r3, [r2, #4]
 800617a:	440c      	add	r4, r1
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	e7da      	b.n	8006136 <_free_r+0x26>
 8006180:	d902      	bls.n	8006188 <_free_r+0x78>
 8006182:	230c      	movs	r3, #12
 8006184:	6003      	str	r3, [r0, #0]
 8006186:	e7d6      	b.n	8006136 <_free_r+0x26>
 8006188:	6825      	ldr	r5, [r4, #0]
 800618a:	1961      	adds	r1, r4, r5
 800618c:	428b      	cmp	r3, r1
 800618e:	bf04      	itt	eq
 8006190:	6819      	ldreq	r1, [r3, #0]
 8006192:	685b      	ldreq	r3, [r3, #4]
 8006194:	6063      	str	r3, [r4, #4]
 8006196:	bf04      	itt	eq
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	6054      	str	r4, [r2, #4]
 800619e:	e7ca      	b.n	8006136 <_free_r+0x26>
 80061a0:	b003      	add	sp, #12
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	20004ea8 	.word	0x20004ea8

080061a8 <__malloc_lock>:
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <__malloc_lock+0x8>)
 80061aa:	f7ff bfa1 	b.w	80060f0 <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	20004ea4 	.word	0x20004ea4

080061b4 <__malloc_unlock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__malloc_unlock+0x8>)
 80061b6:	f7ff bf9c 	b.w	80060f2 <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	20004ea4 	.word	0x20004ea4

080061c0 <_init>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr

080061cc <_fini>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr
